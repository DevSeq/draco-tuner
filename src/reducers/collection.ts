
import { ConstraintSet, SolutionSet } from 'draco-vis';
import { none, Option, option, some } from 'ts-option';
import { getType } from 'typesafe-actions';
import { TopLevelFacetedUnitSpec } from 'vega-lite/build/src/spec';
import { CollectionAction, collectionActions } from '../actions';

export interface CollectionState {
  dracoConstraintSetOpt: Option<ConstraintSet>;
  pairs: Pair[];
}

export interface PairItemId {
  pairId: number;
  position: 'left' | 'right';
}

export interface PairItem {
  id: PairItemId;
  vlSpec: TopLevelFacetedUnitSpec;
  solutionOpt: Option<SolutionSet>;
}

export interface Pair {
  id: number;
  title: string;
  left: PairItem;
  right: PairItem;
  comp: '<' | '=';
}

const collection = (state: CollectionState = initialState, action: CollectionAction) => {
  switch (action.type) {
    case getType(collectionActions.updatePairItem):
      return updatePairItem(state, action.payload);
    case getType(collectionActions.updatePair):
      return updatePair(state, action.payload);
    case getType(collectionActions.setDracoConstraintSet):
      return setDracoConstraintSet(state, action.payload);
    case getType(collectionActions.saveCollection):
      return saveCollection(state);
    case getType(collectionActions.loadCollection):
      return loadCollection(state);
    case getType(collectionActions.addPairs):
      return addPairs(state, action.payload);
    case getType(collectionActions.deletePair):
      return deletePair(state, action.payload);
    case getType(collectionActions.updatePairItemVegaLite):
      return updatePairItemVegaLite(state, action.payload);
    default:
      return state;
  }
};

export default collection;

export const stringifyCollection = (collection: CollectionState): string => {
  const stringifiedState = JSON.stringify(collection, (key, value) => {
    if (key === 'solutionOpt') {
      return value.orNull;
    } else if (key === 'dracoConstraintSetOpt') {
      return null;
    }
    return value;
  });

  return stringifiedState;
}

export const decodeCollection = (collection: string): CollectionState => {
  const parsedState = JSON.parse(collection, (key, value) => {
    if (key === 'solutionOpt') {
      return option(value);
    } else if (key === 'dracoConstraintSetOpt') {
      return option(value);
    }
    return value;
  });

  return parsedState;
}

const setDracoConstraintSet = (state: CollectionState, constraintSet: ConstraintSet) => {
  return {
    ...state,
    dracoConstraintSetOpt: some(constraintSet),
  };
}

const saveCollection = (state: CollectionState) => {
  const storage = window.localStorage;
  const stringifiedState = stringifyCollection(state);
  storage.setItem('draco_tuner/collection_v0.0.1', stringifiedState);
  return state;
}

const loadCollection = (state: CollectionState) => {
  const storage = window.localStorage;
  const savedState = storage.getItem('draco_tuner/collection_v0.0.1');
  if (!savedState) {
    return initial;
  }
  const parsedState = decodeCollection(savedState);
  return parsedState;
}

const addPairs = (state: CollectionState, pairs: Pair[]) => {
  const nextId = state.pairs.length;

  pairs.forEach((pair, i) => {
    pair.id = i + nextId;
    pair.left.id.pairId = i + nextId;
    pair.right.id.pairId = i + nextId;
  });

  const newPairs = state.pairs.concat(pairs);
  return {
    ...state,
    pairs: newPairs
  }
}

const updatePair = (state: CollectionState, pair: Pair) => {
  const pairs = state.pairs.map(p => {
    if (p.id === pair.id) { return pair }
    else { return p }
  })

  return {
    ...state,
    pairs
  };
}

export interface PairItemFromWorker extends PairItem {
  solution?: SolutionSet;
}

const updatePairItem = (state: CollectionState, pairItem: PairItemFromWorker) => {
  if (typeof pairItem.solution !== 'undefined') {
    pairItem = {
      ...pairItem,
      solutionOpt: option(pairItem.solution),
    };
  
    delete pairItem.solution;
  }

  const pairs =
    state.pairs
      .map((pair: Pair) => {
        if (pair.id === pairItem.id.pairId) {
          if (pairItem.id.position === 'left') {
            return {
              ...pair,
              left: {
                ...pairItem,
              },
            };
          }

          return {
            ...pair,
            right: {
              ...pairItem,
            },
          };
        }

        return {
          ...pair,
        };
      });

  return {
    ...state,
    pairs,
  };
};

interface PairItemVegaLiteUpdate {
  pairItemId: PairItemId;
  code: string;
}

const updatePairItemVegaLite = (state: CollectionState, update: PairItemVegaLiteUpdate): CollectionState => {
  const pair = state.pairs.find(p => p.id === update.pairItemId.pairId);
  const pairItem = pair[update.pairItemId.position]
  pairItem.vlSpec = JSON.parse(update.code);

  return updatePairItem(state, pairItem);
}

const deletePair = (state: CollectionState, pairId: number) => {
  const pairs = state.pairs.filter((p: Pair) => p.id !== pairId);
  return {
    ...state,
    pairs,
  };
}

const Q_Q: Pair[] = [
  {
    id: 0,
    title: 'hello',
    comp: '=',
    left: { solutionOpt: none,
      id: {
        pairId: 0,
        position: 'left' as 'left',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'point',
        encoding: {
          x: {
            field: 'horsepower',
            type: 'quantitative',
          },
          y: {
            field: 'acceleration',
            type: 'quantitative',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
    right: { solutionOpt: none,
      id: {
        pairId: 0,
        position: 'right' as 'right',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'point',
        encoding: {
          y: {
            field: 'horsepower',
            type: 'quantitative',
          },
          x: {
            field: 'acceleration',
            type: 'quantitative',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
  },
];

const Q_O: Pair[] = [
  {
    id: 1,
    title: 'hello',
    comp: '<',
    left: { solutionOpt: none,
      id: {
        pairId: 1,
        position: 'left' as 'left',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'bar',
        encoding: {
          x: {
            bin: true,
            field: 'horsepower',
            type: 'quantitative',
          },
          y: {
            aggregate: 'count',
            type: 'quantitative',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
    right: { solutionOpt: none,
      id: {
        pairId: 1,
        position: 'right' as 'right',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'bar',
        encoding: {
          y: {
            bin: true,
            field: 'horsepower',
            type: 'quantitative',
          },
          x: {
            aggregate: 'count',
            type: 'quantitative',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
  },
  {
    id: 2,
    title: 'hello',
    comp: '<',
    left: { solutionOpt: none,
      id: {
        pairId: 2,
        position: 'left' as 'left',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'bar',
        encoding: {
          y: {
            field: 'cylinders',
            type: 'ordinal',
          },
          x: {
            field: 'horsepower',
            type: 'quantitative',
            aggregate: 'mean',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
    right: { solutionOpt: none,
      id: {
        pairId: 2,
        position: 'right' as 'right',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'bar',
        encoding: {
          x: {
            field: 'cylinders',
            type: 'ordinal',
          },
          y: {
            field: 'horsepower',
            type: 'quantitative',
            aggregate: 'mean',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
  },
];

const Q_N: Pair[] = [
  {
    id: 0,
    title: 'hello',
    comp: '<',
    left: { solutionOpt: none,
      id: {
        pairId: 0,
        position: 'left' as 'left',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'bar',
        encoding: {
          y: {
            field: 'origin',
            type: 'nominal',
          },
          x: {
            field: 'horsepower',
            type: 'quantitative',
            aggregate: 'mean',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
    right: { solutionOpt: none,
      id: {
        pairId: 0,
        position: 'right' as 'right',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'bar',
        encoding: {
          x: {
            field: 'origin',
            type: 'nominal',
          },
          y: {
            field: 'horsepower',
            type: 'quantitative',
            aggregate: 'mean',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
  },
];

const O_O: Pair[] = [
  {
    id: 0,
    title: 'hello',
    comp: '<',
    left: { solutionOpt: none,
      id: {
        pairId: 0,
        position: 'left' as 'left',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'point',
        encoding: {
          y: {
            field: 'cylinders',
            type: 'ordinal',
          },
          x: {
            field: 'horsepower',
            type: 'quantitative',
            bin: true,
          },
          size: {
            type: 'quantitative',
            aggregate: 'count',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
    right: { solutionOpt: none,
      id: {
        pairId: 0,
        position: 'right' as 'right',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'point',
        encoding: {
          x: {
            field: 'cylinders',
            type: 'ordinal',
          },
          y: {
            field: 'horsepower',
            type: 'quantitative',
            bin: true,
          },
          size: {
            type: 'quantitative',
            aggregate: 'count',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
  },
];

const O_N: Pair[] = [
  {
    id: 0,
    title: 'hello',
    comp: '=',
    left: { solutionOpt: none,
      id: {
        pairId: 0,
        position: 'left' as 'left',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'point',
        encoding: {
          x: {
            field: 'cylinders',
            type: 'ordinal',
          },
          y: {
            field: 'origin',
            type: 'nominal',
          },
          size: {
            type: 'quantitative',
            aggregate: 'count',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
    right: { solutionOpt: none,
      id: {
        pairId: 0,
        position: 'right' as 'right',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'point',
        encoding: {
          y: {
            field: 'cylinders',
            type: 'ordinal',
          },
          x: {
            field: 'origin',
            type: 'nominal',
          },
          size: {
            type: 'quantitative',
            aggregate: 'count',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
  },
];

const N_N: Pair[] = [
  {
    id: 0,
    title: 'hello',
    comp: '<',
    left: { solutionOpt: none,
      id: {
        pairId: 0,
        position: 'left' as 'left',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'point',
        encoding: {
          y: {
            field: 'name',
            type: 'nominal',
          },
          x: {
            field: 'origin',
            type: 'nominal',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
    right: { solutionOpt: none,
      id: {
        pairId: 0,
        position: 'right' as 'right',
      },
      vlSpec: {
        data: { url : 'cars.json' },
        mark: 'point',
        encoding: {
          x: {
            field: 'name',
            type: 'nominal',
          },
          y: {
            field: 'origin',
            type: 'nominal',
          },
        },
      } as TopLevelFacetedUnitSpec,
    },
  },
];

const X_Y: CollectionState = {
  dracoConstraintSetOpt: none,
  pairs: [
    ...Q_Q,
    ...Q_O,
    ...Q_N,
    ...O_O,
    ...O_N,
    ...N_N,
  ],
};

const initialState = X_Y;

for (let i = 0; i < initialState.pairs.length; i += 1) {
  initialState.pairs[i].id = i;
  initialState.pairs[i].left.id.pairId = i;
  initialState.pairs[i].right.id.pairId = i;
}

const initial = JSON.parse(`{"dracoConstraintSetOpt":null,"pairs":[{"id":0,"title":"hello","comp":"=","left":{"solutionOpt":{"models":[{"costs":[12],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(continuous_y,e1)","soft(continuous_x,e0)","soft(c_c_point,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"}]},{"costs":[18],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","aggregate(e0,mean)","aggregate(e1,mean)","soft(aggregate_mean,e0)","soft(aggregate_mean,e1)","soft(continuous_y,e1)","soft(continuous_x,e0)","soft(aggregate,e0)","soft(aggregate,e1)","soft(c_c_point,_placeholder)","soft(agg_dim,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","field(5,\"cylinders\")","channel(5,size)","soft(continuous_size,5)","soft(continuous_y,e1)","soft(continuous_x,e0)","soft(type_q,5)","type(5,quantitative)","zero(5)","soft(encoding_field,5)","soft(encoding,5)","soft(c_c_point,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","field(5,\"displacement\")","channel(5,size)","soft(continuous_size,5)","soft(continuous_y,e1)","soft(continuous_x,e0)","soft(type_q,5)","type(5,quantitative)","zero(5)","soft(encoding_field,5)","soft(encoding,5)","soft(c_c_point,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","field(5,\"miles_per_gallon\")","channel(5,size)","soft(continuous_size,5)","soft(continuous_y,e1)","soft(continuous_x,e0)","soft(type_q,5)","type(5,quantitative)","zero(5)","soft(encoding_field,5)","soft(encoding,5)","soft(c_c_point,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","field(5,\"weight_in_lbs\")","channel(5,size)","soft(continuous_size,5)","soft(continuous_y,e1)","soft(continuous_x,e0)","soft(type_q,5)","type(5,quantitative)","zero(5)","soft(encoding_field,5)","soft(encoding,5)","soft(c_c_point,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","aggregate(e0,sum)","aggregate(e1,mean)","soft(aggregate_mean,e1)","soft(aggregate_sum,e0)","soft(continuous_y,e1)","soft(continuous_x,e0)","soft(aggregate,e0)","soft(aggregate,e1)","soft(c_c_point,_placeholder)","soft(agg_dim,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Sum as aggregate op.","type":"soft","name":"aggregate_sum","asp":"soft(aggregate_sum,E) :- aggregate(E,sum).","weight":2,"witness":"soft(aggregate_sum,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"cylinders","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"displacement","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"weight_in_lbs","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"x":{"type":"quantitative","aggregate":"sum","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"zero":true}}}}]},"id":{"pairId":0,"position":"left"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"point","encoding":{"x":{"field":"horsepower","type":"quantitative"},"y":{"field":"acceleration","type":"quantitative"}}}},"right":{"solutionOpt":{"models":[{"costs":[12],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(continuous_y,e0)","soft(continuous_x,e1)","soft(c_c_point,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"}]},{"costs":[18],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","aggregate(e0,mean)","aggregate(e1,mean)","soft(aggregate_mean,e0)","soft(aggregate_mean,e1)","soft(continuous_y,e0)","soft(continuous_x,e1)","soft(aggregate,e0)","soft(aggregate,e1)","soft(c_c_point,_placeholder)","soft(agg_dim,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","aggregate(e0,mean)","aggregate(e1,sum)","soft(aggregate_mean,e0)","soft(aggregate_sum,e1)","soft(continuous_y,e0)","soft(continuous_x,e1)","soft(aggregate,e0)","soft(aggregate,e1)","soft(c_c_point,_placeholder)","soft(agg_dim,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Sum as aggregate op.","type":"soft","name":"aggregate_sum","asp":"soft(aggregate_sum,E) :- aggregate(E,sum).","weight":2,"witness":"soft(aggregate_sum,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","aggregate(e0,sum)","aggregate(e1,mean)","soft(aggregate_mean,e1)","soft(aggregate_sum,e0)","soft(continuous_y,e0)","soft(continuous_x,e1)","soft(aggregate,e0)","soft(aggregate,e1)","soft(c_c_point,_placeholder)","soft(agg_dim,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Sum as aggregate op.","type":"soft","name":"aggregate_sum","asp":"soft(aggregate_sum,E) :- aggregate(E,sum).","weight":2,"witness":"soft(aggregate_sum,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","field(5,\"miles_per_gallon\")","channel(5,size)","soft(continuous_size,5)","soft(continuous_y,e0)","soft(continuous_x,e1)","soft(type_q,5)","type(5,quantitative)","zero(5)","soft(encoding_field,5)","soft(encoding,5)","soft(c_c_point,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","field(5,\"weight_in_lbs\")","channel(5,size)","soft(continuous_size,5)","soft(continuous_y,e0)","soft(continuous_x,e1)","soft(type_q,5)","type(5,quantitative)","zero(5)","soft(encoding_field,5)","soft(encoding,5)","soft(c_c_point,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","field(e1,\"acceleration\")","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding,e0)","soft(encoding,e1)","type(e0,quantitative)","type(e1,quantitative)","field(5,\"displacement\")","channel(5,size)","soft(continuous_size,5)","soft(continuous_y,e0)","soft(continuous_x,e1)","soft(type_q,5)","type(5,quantitative)","zero(5)","soft(encoding_field,5)","soft(encoding,5)","soft(c_c_point,_placeholder)"],"violations":[{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"y":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"sum","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"y":{"type":"quantitative","aggregate":"sum","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"weight_in_lbs","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","field":"acceleration","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"displacement","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","field":"acceleration","scale":{"zero":true}}}}]},"id":{"pairId":0,"position":"right"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"point","encoding":{"y":{"field":"horsepower","type":"quantitative"},"x":{"field":"acceleration","type":"quantitative"}}}}},{"id":1,"title":"hello","comp":"<","left":{"solutionOpt":{"models":[{"costs":[10],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_x,e0)","soft(continuous_y,e1)","soft(c_d_no_overlap_bar,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"}]},{"costs":[10],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_x,e0)","soft(continuous_y,e1)","zero(e0)","soft(c_d_no_overlap_bar,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"}]},{"costs":[25],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_x,e0)","soft(continuous_y,e1)","type(5,ordinal)","field(5,\"cylinders\")","channel(5,color)","stack(e1,zero)","soft(ordered_color,5)","soft(type_o,5)","soft(encoding_field,5)","soft(encoding,5)","soft(stack_zero,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Zero base for stack op.","type":"soft","name":"stack_zero","asp":"soft(stack_zero) :- stack(zero).","weight":0,"witness":"soft(stack_zero,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"}]},{"costs":[25],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_x,e0)","soft(continuous_y,e1)","type(5,ordinal)","field(5,\"cylinders\")","channel(5,color)","stack(e1,zero)","soft(ordered_color,5)","soft(type_o,5)","zero(e0)","soft(encoding_field,5)","soft(encoding,5)","soft(stack_zero,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Zero base for stack op.","type":"soft","name":"stack_zero","asp":"soft(stack_zero) :- stack(zero).","weight":0,"witness":"soft(stack_zero,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"}]},{"costs":[25],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_x,e0)","soft(continuous_y,e1)","type(5,ordinal)","field(5,\"origin\")","channel(5,color)","stack(e1,zero)","soft(ordered_color,5)","soft(type_o,5)","soft(encoding_field,5)","soft(encoding,5)","soft(stack_zero,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Zero base for stack op.","type":"soft","name":"stack_zero","asp":"soft(stack_zero) :- stack(zero).","weight":0,"witness":"soft(stack_zero,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"}]},{"costs":[25],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_x,e0)","soft(continuous_y,e1)","type(5,ordinal)","field(5,\"origin\")","channel(5,color)","stack(e1,zero)","soft(ordered_color,5)","soft(type_o,5)","zero(e0)","soft(encoding_field,5)","soft(encoding,5)","soft(stack_zero,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Zero base for stack op.","type":"soft","name":"stack_zero","asp":"soft(stack_zero) :- stack(zero).","weight":0,"witness":"soft(stack_zero,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"}]},{"costs":[25],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_x,e0)","soft(continuous_y,e1)","type(5,ordinal)","field(5,\"year\")","channel(5,color)","stack(e1,zero)","soft(ordered_color,5)","soft(type_o,5)","soft(encoding_field,5)","soft(encoding,5)","soft(stack_zero,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Zero base for stack op.","type":"soft","name":"stack_zero","asp":"soft(stack_zero) :- stack(zero).","weight":0,"witness":"soft(stack_zero,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"ordinal","field":"cylinders"},"y":{"type":"quantitative","aggregate":"count","stack":"zero","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"ordinal","field":"cylinders"},"y":{"type":"quantitative","aggregate":"count","stack":"zero","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"ordinal","field":"origin"},"y":{"type":"quantitative","aggregate":"count","stack":"zero","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"ordinal","field":"origin"},"y":{"type":"quantitative","aggregate":"count","stack":"zero","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"ordinal","field":"year"},"y":{"type":"quantitative","aggregate":"count","stack":"zero","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true}}}]},"id":{"pairId":1,"position":"left"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"bar","encoding":{"x":{"bin":true,"field":"horsepower","type":"quantitative"},"y":{"aggregate":"count","type":"quantitative"}}}},"right":{"solutionOpt":{"models":[{"costs":[11],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_y,e0)","soft(continuous_x,e1)","soft(c_d_no_overlap_bar,_placeholder)","soft(orientation_binned,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":2,"witness":"soft(orientation_binned,_placeholder)"}]},{"costs":[11],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_y,e0)","soft(continuous_x,e1)","zero(e0)","soft(c_d_no_overlap_bar,_placeholder)","soft(orientation_binned,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":2,"witness":"soft(orientation_binned,_placeholder)"}]},{"costs":[26],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_y,e0)","soft(continuous_x,e1)","type(5,ordinal)","field(5,\"cylinders\")","channel(5,color)","stack(e1,zero)","soft(ordered_color,5)","soft(type_o,5)","soft(encoding_field,5)","soft(encoding,5)","soft(stack_zero,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)","soft(orientation_binned,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Zero base for stack op.","type":"soft","name":"stack_zero","asp":"soft(stack_zero) :- stack(zero).","weight":0,"witness":"soft(stack_zero,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":2,"witness":"soft(orientation_binned,_placeholder)"}]},{"costs":[26],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_y,e0)","soft(continuous_x,e1)","type(5,ordinal)","field(5,\"cylinders\")","channel(5,color)","stack(e1,zero)","soft(ordered_color,5)","soft(type_o,5)","zero(e0)","soft(encoding_field,5)","soft(encoding,5)","soft(stack_zero,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)","soft(orientation_binned,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Zero base for stack op.","type":"soft","name":"stack_zero","asp":"soft(stack_zero) :- stack(zero).","weight":0,"witness":"soft(stack_zero,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":2,"witness":"soft(orientation_binned,_placeholder)"}]},{"costs":[26],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_y,e0)","soft(continuous_x,e1)","type(5,ordinal)","field(5,\"origin\")","channel(5,color)","stack(e1,zero)","soft(ordered_color,5)","soft(type_o,5)","soft(encoding_field,5)","soft(encoding,5)","soft(stack_zero,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)","soft(orientation_binned,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Zero base for stack op.","type":"soft","name":"stack_zero","asp":"soft(stack_zero) :- stack(zero).","weight":0,"witness":"soft(stack_zero,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":2,"witness":"soft(orientation_binned,_placeholder)"}]},{"costs":[26],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_y,e0)","soft(continuous_x,e1)","type(5,ordinal)","field(5,\"origin\")","channel(5,color)","stack(e1,zero)","soft(ordered_color,5)","soft(type_o,5)","zero(e0)","soft(encoding_field,5)","soft(encoding,5)","soft(stack_zero,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)","soft(orientation_binned,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Zero base for stack op.","type":"soft","name":"stack_zero","asp":"soft(stack_zero) :- stack(zero).","weight":0,"witness":"soft(stack_zero,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":2,"witness":"soft(orientation_binned,_placeholder)"}]},{"costs":[26],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,count)","bin(e0,10)","channel(e0,y)","channel(e1,x)","field(e0,\"horsepower\")","soft(aggregate_count,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(encoding_field,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(bin,e0)","soft(aggregate,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(ordered_y,e0)","soft(continuous_x,e1)","type(5,ordinal)","field(5,\"year\")","channel(5,color)","stack(e1,zero)","soft(ordered_color,5)","soft(type_o,5)","soft(encoding_field,5)","soft(encoding,5)","soft(stack_zero,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)","soft(orientation_binned,_placeholder)"],"violations":[{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Zero base for stack op.","type":"soft","name":"stack_zero","asp":"soft(stack_zero) :- stack(zero).","weight":0,"witness":"soft(stack_zero,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":2,"witness":"soft(orientation_binned,_placeholder)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"x":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"x":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","aggregate":"count","stack":"zero","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","aggregate":"count","stack":"zero","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"ordinal","field":"origin"},"x":{"type":"quantitative","aggregate":"count","stack":"zero","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"ordinal","field":"origin"},"x":{"type":"quantitative","aggregate":"count","stack":"zero","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"ordinal","field":"year"},"x":{"type":"quantitative","aggregate":"count","stack":"zero","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true}}}]},"id":{"pairId":1,"position":"right"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"bar","encoding":{"y":{"bin":true,"field":"horsepower","type":"quantitative"},"x":{"aggregate":"count","type":"quantitative"}}}}},{"id":2,"title":"hello","comp":"<","left":{"solutionOpt":{"models":[{"costs":[15],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_x,e1)","soft(c_d_no_overlap_bar,_placeholder)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[18],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_x,e1)","bin(e0,10)","soft(c_d_no_overlap_bar,_placeholder)","soft(bin,e0)","soft(quant_bin,e0)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_x,e1)","aggregate(e0,median)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_median,e0)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Median as aggregate op.","type":"soft","name":"aggregate_median","asp":"soft(aggregate_median,E) :- aggregate(E,median).","weight":3,"witness":"soft(aggregate_median,e0)"}]},{"costs":[20],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_x,e1)","aggregate(e0,max)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_max,e0)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Max as aggregate op.","type":"soft","name":"aggregate_max","asp":"soft(aggregate_max,E) :- aggregate(E,max).","weight":4,"witness":"soft(aggregate_max,e0)"}]},{"costs":[20],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_x,e1)","aggregate(e0,min)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_min,e0)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"}]},{"costs":[26],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_x,e1)","aggregate(5,count)","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_color,5)","soft(ordered_y,e0)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[27],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_x,e1)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(ordered_y,e0)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","field":"cylinders","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"median","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"max","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","field":"cylinders"}}}]},"id":{"pairId":2,"position":"left"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"bar","encoding":{"y":{"field":"cylinders","type":"ordinal"},"x":{"field":"horsepower","type":"quantitative","aggregate":"mean"}}}},"right":{"solutionOpt":{"models":[{"costs":[16],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_y,e1)","soft(c_d_no_overlap_bar,_placeholder)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_y,e1)","bin(e0,10)","soft(c_d_no_overlap_bar,_placeholder)","soft(bin,e0)","soft(quant_bin,e0)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[20],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_y,e1)","aggregate(e0,median)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,e0)","soft(ordered_x,e0)","soft(aggregate_median,e0)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Median as aggregate op.","type":"soft","name":"aggregate_median","asp":"soft(aggregate_median,E) :- aggregate(E,median).","weight":3,"witness":"soft(aggregate_median,e0)"}]},{"costs":[21],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_y,e1)","aggregate(e0,min)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,e0)","soft(ordered_x,e0)","soft(aggregate_min,e0)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"}]},{"costs":[21],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_y,e1)","aggregate(e0,max)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,e0)","soft(ordered_x,e0)","soft(aggregate_max,e0)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Max as aggregate op.","type":"soft","name":"aggregate_max","asp":"soft(aggregate_max,E) :- aggregate(E,max).","weight":4,"witness":"soft(aggregate_max,e0)"}]},{"costs":[27],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_y,e1)","aggregate(5,count)","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_color,5)","soft(ordered_x,e0)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[28],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","soft(continuous_y,e1)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(ordered_x,e0)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"ordinal","field":"cylinders","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"ordinal","aggregate":"median","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"ordinal","aggregate":"min","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"ordinal","aggregate":"max","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"ordinal","field":"cylinders"}}}]},"id":{"pairId":2,"position":"right"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"bar","encoding":{"x":{"field":"cylinders","type":"ordinal"},"y":{"field":"horsepower","type":"quantitative","aggregate":"mean"}}}}},{"id":3,"title":"hello","comp":"<","left":{"solutionOpt":{"models":[{"costs":[16],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_x,e1)","soft(c_d_no_overlap_bar,_placeholder)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"}]},{"costs":[27],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_x,e1)","aggregate(5,count)","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[28],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_x,e1)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[29],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_x,e1)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,5)","log(5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[33],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_x,e1)","type(5,nominal)","field(5,\"year\")","channel(5,row)","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(nominal_row,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,5)"}]},{"costs":[34],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_x,e1)","field(5,\"weight_in_lbs\")","channel(5,color)","aggregate(5,mean)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[34],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_x,e1)","field(5,\"displacement\")","channel(5,color)","aggregate(5,mean)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"type":"log","zero":false}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"row":{"type":"nominal","field":"year"},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"weight_in_lbs","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"displacement","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"origin"}}}]},"id":{"pairId":3,"position":"left"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"bar","encoding":{"y":{"field":"origin","type":"nominal"},"x":{"field":"horsepower","type":"quantitative","aggregate":"mean"}}}},"right":{"solutionOpt":{"models":[{"costs":[19],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_y,e1)","soft(c_d_no_overlap_bar,_placeholder)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"}]},{"costs":[30],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_y,e1)","aggregate(5,count)","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[31],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_y,e1)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[32],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_y,e1)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,5)","log(5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[36],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_y,e1)","type(5,nominal)","field(5,\"year\")","channel(5,row)","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(c_d_no_overlap_bar,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(nominal_row,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,5)"}]},{"costs":[37],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_y,e1)","field(5,\"cylinders\")","channel(5,color)","aggregate(5,mean)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[37],"facts":["data(\"cars.json\")","mark(bar)","zero(e1)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","soft(continuous_y,e1)","field(5,\"displacement\")","channel(5,color)","aggregate(5,mean)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"type":"log","zero":false}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"row":{"type":"nominal","field":"year"},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"cylinders","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"displacement","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"nominal","field":"origin"}}}]},"id":{"pairId":3,"position":"right"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"bar","encoding":{"x":{"field":"origin","type":"nominal"},"y":{"field":"horsepower","type":"quantitative","aggregate":"mean"}}}}},{"id":4,"title":"hello","comp":"<","left":{"solutionOpt":{"models":[{"costs":[18],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[18],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_x,e1)","zero(e1)","soft(ordered_y,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[21],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_x,e1)","bin(e0,10)","soft(bin,e0)","soft(quant_bin,e0)","soft(ordered_y,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[21],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_x,e1)","bin(e0,10)","zero(e1)","soft(bin,e0)","soft(quant_bin,e0)","soft(ordered_y,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[22],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_x,e1)","aggregate(e0,median)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_median,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Median as aggregate op.","type":"soft","name":"aggregate_median","asp":"soft(aggregate_median,E) :- aggregate(E,median).","weight":3,"witness":"soft(aggregate_median,e0)"}]},{"costs":[22],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_x,e1)","aggregate(e0,median)","zero(e1)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_median,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Median as aggregate op.","type":"soft","name":"aggregate_median","asp":"soft(aggregate_median,E) :- aggregate(E,median).","weight":3,"witness":"soft(aggregate_median,e0)"}]},{"costs":[23],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_x,e1)","aggregate(e0,min)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_min,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true},"y":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"y":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true},"y":{"type":"ordinal","field":"cylinders","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"y":{"type":"ordinal","field":"cylinders","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true},"y":{"type":"ordinal","aggregate":"median","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"median","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true},"y":{"type":"ordinal","aggregate":"min","field":"cylinders"}}}]},"id":{"pairId":4,"position":"left"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"point","encoding":{"y":{"field":"cylinders","type":"ordinal"},"x":{"field":"horsepower","type":"quantitative","bin":true},"size":{"type":"quantitative","aggregate":"count"}}}},"right":{"solutionOpt":{"models":[{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_y,e1)","soft(orientation_binned,_placeholder)","soft(ordered_x,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_y,e1)","zero(e1)","soft(orientation_binned,_placeholder)","soft(ordered_x,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[22],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_y,e1)","bin(e0,10)","soft(orientation_binned,_placeholder)","soft(bin,e0)","soft(quant_bin,e0)","soft(ordered_x,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[22],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_y,e1)","bin(e0,10)","zero(e1)","soft(orientation_binned,_placeholder)","soft(bin,e0)","soft(quant_bin,e0)","soft(ordered_x,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[23],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_y,e1)","aggregate(e0,median)","soft(orientation_binned,_placeholder)","soft(aggregate,e0)","soft(ordered_x,e0)","soft(aggregate_median,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Median as aggregate op.","type":"soft","name":"aggregate_median","asp":"soft(aggregate_median,E) :- aggregate(E,median).","weight":3,"witness":"soft(aggregate_median,e0)"}]},{"costs":[23],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_y,e1)","aggregate(e0,median)","zero(e1)","soft(orientation_binned,_placeholder)","soft(aggregate,e0)","soft(ordered_x,e0)","soft(aggregate_median,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Median as aggregate op.","type":"soft","name":"aggregate_median","asp":"soft(aggregate_median,E) :- aggregate(E,median).","weight":3,"witness":"soft(aggregate_median,e0)"}]},{"costs":[24],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","bin(e1,10)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(bin,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_y,e1)","aggregate(e0,min)","soft(orientation_binned,_placeholder)","soft(aggregate,e0)","soft(ordered_x,e0)","soft(aggregate_min,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true},"x":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"x":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true},"x":{"type":"ordinal","field":"cylinders","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"x":{"type":"ordinal","field":"cylinders","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true},"x":{"type":"ordinal","aggregate":"median","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"x":{"type":"ordinal","aggregate":"median","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","field":"horsepower","bin":true},"x":{"type":"ordinal","aggregate":"min","field":"cylinders"}}}]},"id":{"pairId":4,"position":"right"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"point","encoding":{"x":{"field":"cylinders","type":"ordinal"},"y":{"field":"horsepower","type":"quantitative","bin":true},"size":{"type":"quantitative","aggregate":"count"}}}}},{"id":5,"title":"hello","comp":"<","left":{"solutionOpt":{"models":[{"costs":[18],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_y,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_x,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[21],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_y,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","bin(e0,10)","soft(bin,e0)","soft(quant_bin,e0)","soft(ordered_x,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[22],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_y,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","aggregate(e0,median)","soft(aggregate,e0)","soft(ordered_x,e0)","soft(aggregate_median,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Median as aggregate op.","type":"soft","name":"aggregate_median","asp":"soft(aggregate_median,E) :- aggregate(E,median).","weight":3,"witness":"soft(aggregate_median,e0)"}]},{"costs":[23],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_y,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","aggregate(e0,max)","soft(aggregate,e0)","soft(ordered_x,e0)","soft(aggregate_max,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Max as aggregate op.","type":"soft","name":"aggregate_max","asp":"soft(aggregate_max,E) :- aggregate(E,max).","weight":4,"witness":"soft(aggregate_max,e0)"}]},{"costs":[23],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_y,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","aggregate(e0,min)","soft(aggregate,e0)","soft(ordered_x,e0)","soft(aggregate_min,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"}]},{"costs":[31],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_y,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","bin(e0,25)","soft(bin,e0)","soft(bin_high,e0)","soft(quant_bin,e0)","soft(ordered_x,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer binning with at most 12 buckets.","type":"soft","name":"bin_high","asp":"soft(bin_high,E) :- bin(E,B), B > 12.","weight":10,"witness":"soft(bin_high,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[35],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_y,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","type(5,nominal)","field(5,\"year\")","channel(5,row)","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(ordered_x,e0)","soft(nominal_row,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"ordinal","field":"cylinders"},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"ordinal","field":"cylinders","bin":true},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"ordinal","aggregate":"median","field":"cylinders"},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"ordinal","aggregate":"max","field":"cylinders"},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"ordinal","aggregate":"min","field":"cylinders"},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"ordinal","field":"cylinders","bin":{"maxbins":25}},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"row":{"type":"nominal","field":"year"},"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"ordinal","field":"cylinders"},"y":{"type":"nominal","field":"origin"}}}]},"id":{"pairId":5,"position":"left"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"point","encoding":{"x":{"field":"cylinders","type":"ordinal"},"y":{"field":"origin","type":"nominal"},"size":{"type":"quantitative","aggregate":"count"}}}},"right":{"solutionOpt":{"models":[{"costs":[20],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","soft(ordered_y,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[23],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","bin(e0,10)","soft(bin,e0)","soft(quant_bin,e0)","soft(ordered_y,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[24],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","aggregate(e0,median)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_median,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Median as aggregate op.","type":"soft","name":"aggregate_median","asp":"soft(aggregate_median,E) :- aggregate(E,median).","weight":3,"witness":"soft(aggregate_median,e0)"}]},{"costs":[25],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","aggregate(e0,max)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_max,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Max as aggregate op.","type":"soft","name":"aggregate_max","asp":"soft(aggregate_max,E) :- aggregate(E,max).","weight":4,"witness":"soft(aggregate_max,e0)"}]},{"costs":[25],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","aggregate(e0,min)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_min,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"}]},{"costs":[33],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","bin(e0,25)","soft(bin,e0)","soft(bin_high,e0)","soft(quant_bin,e0)","soft(ordered_y,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer binning with at most 12 buckets.","type":"soft","name":"bin_high","asp":"soft(bin_high,E) :- bin(E,B), B > 12.","weight":10,"witness":"soft(bin_high,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[37],"facts":["data(\"cars.json\")","mark(point)","zero(e2)","aggregate(e2,count)","channel(e0,y)","channel(e1,x)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(aggregate_count,e2)","type(e0,ordinal)","type(e1,nominal)","type(e2,quantitative)","soft(continuous_size,e2)","type(5,nominal)","field(5,\"year\")","channel(5,row)","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(ordered_y,e0)","soft(nominal_row,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"ordinal","field":"cylinders","bin":true},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"median","field":"cylinders"},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"max","field":"cylinders"},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"cylinders"},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"ordinal","field":"cylinders","bin":{"maxbins":25}},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"row":{"type":"nominal","field":"year"},"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"nominal","field":"origin"}}}]},"id":{"pairId":5,"position":"right"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"point","encoding":{"y":{"field":"cylinders","type":"ordinal"},"x":{"field":"origin","type":"nominal"},"size":{"type":"quantitative","aggregate":"count"}}}}},{"id":6,"title":"hello","comp":"<","left":{"solutionOpt":{"models":[{"costs":[31],"facts":["data(\"cars.json\")","mark(point)","channel(e0,y)","channel(e1,x)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,nominal)","aggregate(5,count)","type(5,quantitative)","channel(5,size)","zero(5)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_size,5)","soft(aggregate_count,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[35],"facts":["data(\"cars.json\")","mark(point)","channel(e0,y)","channel(e1,x)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,nominal)","aggregate(5,count)","type(5,quantitative)","channel(5,size)","soft(zero_size,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_size,5)","soft(aggregate_count,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[36],"facts":["data(\"cars.json\")","mark(point)","channel(e0,y)","channel(e1,x)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,nominal)","aggregate(5,count)","type(5,quantitative)","channel(5,size)","soft(zero_size,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,5)","log(5)","soft(zero,5)","soft(type_q,5)","soft(continuous_size,5)","soft(aggregate_count,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[37],"facts":["data(\"cars.json\")","mark(point)","channel(e0,y)","channel(e1,x)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,nominal)","type(5,quantitative)","field(5,\"displacement\")","channel(5,size)","zero(5)","soft(encoding,5)","soft(encoding_field,5)","soft(x_y_raw,5)","soft(type_q,5)","soft(continuous_size,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer not to use plot with both x and y discrete and no aggregate as it leads to occlusion.","type":"soft","name":"x_y_raw","asp":"soft(x_y_raw,E) :- channel(EX,x), discrete(EX), channel(EY,y), discrete(EY), not aggregate(E,_), continuous(E).","weight":1,"witness":"soft(x_y_raw,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"}]},{"costs":[37],"facts":["data(\"cars.json\")","mark(point)","channel(e0,y)","channel(e1,x)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,nominal)","type(5,quantitative)","field(5,\"cylinders\")","channel(5,size)","zero(5)","soft(encoding,5)","soft(encoding_field,5)","soft(x_y_raw,5)","soft(type_q,5)","soft(continuous_size,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer not to use plot with both x and y discrete and no aggregate as it leads to occlusion.","type":"soft","name":"x_y_raw","asp":"soft(x_y_raw,E) :- channel(EX,x), discrete(EX), channel(EY,y), discrete(EY), not aggregate(E,_), continuous(E).","weight":1,"witness":"soft(x_y_raw,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"}]},{"costs":[37],"facts":["data(\"cars.json\")","mark(point)","channel(e0,y)","channel(e1,x)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,nominal)","type(5,quantitative)","field(5,\"weight_in_lbs\")","channel(5,size)","zero(5)","soft(encoding,5)","soft(encoding_field,5)","soft(x_y_raw,5)","soft(type_q,5)","soft(continuous_size,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer not to use plot with both x and y discrete and no aggregate as it leads to occlusion.","type":"soft","name":"x_y_raw","asp":"soft(x_y_raw,E) :- channel(EX,x), discrete(EX), channel(EY,y), discrete(EY), not aggregate(E,_), continuous(E).","weight":1,"witness":"soft(x_y_raw,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"}]},{"costs":[37],"facts":["data(\"cars.json\")","mark(point)","channel(e0,y)","channel(e1,x)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e1)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,nominal)","type(5,quantitative)","field(5,\"acceleration\")","channel(5,size)","zero(5)","soft(encoding,5)","soft(encoding_field,5)","soft(x_y_raw,5)","soft(type_q,5)","soft(continuous_size,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer not to use plot with both x and y discrete and no aggregate as it leads to occlusion.","type":"soft","name":"x_y_raw","asp":"soft(x_y_raw,E) :- channel(EX,x), discrete(EX), channel(EY,y), discrete(EY), not aggregate(E,_), continuous(E).","weight":1,"witness":"soft(x_y_raw,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"nominal","field":"name"},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"y":{"type":"nominal","field":"name"},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"type":"log","zero":false}},"y":{"type":"nominal","field":"name"},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"displacement","scale":{"zero":true}},"y":{"type":"nominal","field":"name"},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"cylinders","scale":{"zero":true}},"y":{"type":"nominal","field":"name"},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"weight_in_lbs","scale":{"zero":true}},"y":{"type":"nominal","field":"name"},"x":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"acceleration","scale":{"zero":true}},"y":{"type":"nominal","field":"name"},"x":{"type":"nominal","field":"origin"}}}]},"id":{"pairId":6,"position":"left"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"point","encoding":{"y":{"field":"name","type":"nominal"},"x":{"field":"origin","type":"nominal"}}}},"right":{"solutionOpt":{"models":[{"costs":[51],"facts":["data(\"cars.json\")","mark(point)","channel(e0,x)","channel(e1,y)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e0)","soft(nominal_y,e1)","type(e0,nominal)","type(e1,nominal)","soft(horizontal_scrolling,e0)","aggregate(5,count)","type(5,quantitative)","channel(5,size)","zero(5)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_size,5)","soft(aggregate_count,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Avoid high cardinality on x or column as it causes horizontal scrolling.","type":"soft","name":"horizontal_scrolling","asp":"soft(horizontal_scrolling,E) :- channel(E,x), discrete_cardinality(E,C), C > 50.\nsoft(horizontal_scrolling,E) :- channel(E,columm), discrete_cardinality(E,C), C > 5.","weight":20,"witness":"soft(horizontal_scrolling,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[55],"facts":["data(\"cars.json\")","mark(point)","channel(e0,x)","channel(e1,y)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e0)","soft(nominal_y,e1)","type(e0,nominal)","type(e1,nominal)","soft(horizontal_scrolling,e0)","aggregate(5,count)","type(5,quantitative)","channel(5,size)","soft(zero_size,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_size,5)","soft(aggregate_count,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Avoid high cardinality on x or column as it causes horizontal scrolling.","type":"soft","name":"horizontal_scrolling","asp":"soft(horizontal_scrolling,E) :- channel(E,x), discrete_cardinality(E,C), C > 50.\nsoft(horizontal_scrolling,E) :- channel(E,columm), discrete_cardinality(E,C), C > 5.","weight":20,"witness":"soft(horizontal_scrolling,e0)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[56],"facts":["data(\"cars.json\")","mark(point)","channel(e0,x)","channel(e1,y)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e0)","soft(nominal_y,e1)","type(e0,nominal)","type(e1,nominal)","soft(horizontal_scrolling,e0)","aggregate(5,count)","type(5,quantitative)","channel(5,size)","soft(zero_size,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,5)","log(5)","soft(zero,5)","soft(type_q,5)","soft(continuous_size,5)","soft(aggregate_count,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Avoid high cardinality on x or column as it causes horizontal scrolling.","type":"soft","name":"horizontal_scrolling","asp":"soft(horizontal_scrolling,E) :- channel(E,x), discrete_cardinality(E,C), C > 50.\nsoft(horizontal_scrolling,E) :- channel(E,columm), discrete_cardinality(E,C), C > 5.","weight":20,"witness":"soft(horizontal_scrolling,e0)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[57],"facts":["data(\"cars.json\")","mark(point)","channel(e0,x)","channel(e1,y)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e0)","soft(nominal_y,e1)","type(e0,nominal)","type(e1,nominal)","soft(horizontal_scrolling,e0)","type(5,quantitative)","field(5,\"displacement\")","channel(5,size)","zero(5)","soft(encoding,5)","soft(encoding_field,5)","soft(x_y_raw,5)","soft(type_q,5)","soft(continuous_size,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Avoid high cardinality on x or column as it causes horizontal scrolling.","type":"soft","name":"horizontal_scrolling","asp":"soft(horizontal_scrolling,E) :- channel(E,x), discrete_cardinality(E,C), C > 50.\nsoft(horizontal_scrolling,E) :- channel(E,columm), discrete_cardinality(E,C), C > 5.","weight":20,"witness":"soft(horizontal_scrolling,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer not to use plot with both x and y discrete and no aggregate as it leads to occlusion.","type":"soft","name":"x_y_raw","asp":"soft(x_y_raw,E) :- channel(EX,x), discrete(EX), channel(EY,y), discrete(EY), not aggregate(E,_), continuous(E).","weight":1,"witness":"soft(x_y_raw,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"}]},{"costs":[57],"facts":["data(\"cars.json\")","mark(point)","channel(e0,x)","channel(e1,y)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e0)","soft(nominal_y,e1)","type(e0,nominal)","type(e1,nominal)","soft(horizontal_scrolling,e0)","type(5,quantitative)","field(5,\"cylinders\")","channel(5,size)","zero(5)","soft(encoding,5)","soft(encoding_field,5)","soft(x_y_raw,5)","soft(type_q,5)","soft(continuous_size,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Avoid high cardinality on x or column as it causes horizontal scrolling.","type":"soft","name":"horizontal_scrolling","asp":"soft(horizontal_scrolling,E) :- channel(E,x), discrete_cardinality(E,C), C > 50.\nsoft(horizontal_scrolling,E) :- channel(E,columm), discrete_cardinality(E,C), C > 5.","weight":20,"witness":"soft(horizontal_scrolling,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer not to use plot with both x and y discrete and no aggregate as it leads to occlusion.","type":"soft","name":"x_y_raw","asp":"soft(x_y_raw,E) :- channel(EX,x), discrete(EX), channel(EY,y), discrete(EY), not aggregate(E,_), continuous(E).","weight":1,"witness":"soft(x_y_raw,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"}]},{"costs":[57],"facts":["data(\"cars.json\")","mark(point)","channel(e0,x)","channel(e1,y)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e0)","soft(nominal_y,e1)","type(e0,nominal)","type(e1,nominal)","soft(horizontal_scrolling,e0)","type(5,quantitative)","field(5,\"weight_in_lbs\")","channel(5,size)","zero(5)","soft(encoding,5)","soft(encoding_field,5)","soft(x_y_raw,5)","soft(type_q,5)","soft(continuous_size,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Avoid high cardinality on x or column as it causes horizontal scrolling.","type":"soft","name":"horizontal_scrolling","asp":"soft(horizontal_scrolling,E) :- channel(E,x), discrete_cardinality(E,C), C > 50.\nsoft(horizontal_scrolling,E) :- channel(E,columm), discrete_cardinality(E,C), C > 5.","weight":20,"witness":"soft(horizontal_scrolling,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer not to use plot with both x and y discrete and no aggregate as it leads to occlusion.","type":"soft","name":"x_y_raw","asp":"soft(x_y_raw,E) :- channel(EX,x), discrete(EX), channel(EY,y), discrete(EY), not aggregate(E,_), continuous(E).","weight":1,"witness":"soft(x_y_raw,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"}]},{"costs":[57],"facts":["data(\"cars.json\")","mark(point)","channel(e0,x)","channel(e1,y)","field(e0,\"name\")","field(e1,\"origin\")","soft(d_d_point,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(high_cardinality_nominal,e0)","soft(type_n,e0)","soft(type_n,e1)","soft(nominal_x,e0)","soft(nominal_y,e1)","type(e0,nominal)","type(e1,nominal)","soft(horizontal_scrolling,e0)","type(5,quantitative)","field(5,\"acceleration\")","channel(5,size)","zero(5)","soft(encoding,5)","soft(encoding_field,5)","soft(x_y_raw,5)","soft(type_q,5)","soft(continuous_size,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer not to use nominal for fields with high cardinality.","type":"soft","name":"high_cardinality_nominal","asp":"soft(high_cardinality_nominal,E) :- type(E,nominal), enc_cardinality(E,C), C > 12.","weight":10,"witness":"soft(high_cardinality_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Avoid high cardinality on x or column as it causes horizontal scrolling.","type":"soft","name":"horizontal_scrolling","asp":"soft(horizontal_scrolling,E) :- channel(E,x), discrete_cardinality(E,C), C > 50.\nsoft(horizontal_scrolling,E) :- channel(E,columm), discrete_cardinality(E,C), C > 5.","weight":20,"witness":"soft(horizontal_scrolling,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer not to use plot with both x and y discrete and no aggregate as it leads to occlusion.","type":"soft","name":"x_y_raw","asp":"soft(x_y_raw,E) :- channel(EX,x), discrete(EX), channel(EY,y), discrete(EY), not aggregate(E,_), continuous(E).","weight":1,"witness":"soft(x_y_raw,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"nominal","field":"name"},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"x":{"type":"nominal","field":"name"},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"type":"log","zero":false}},"x":{"type":"nominal","field":"name"},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"displacement","scale":{"zero":true}},"x":{"type":"nominal","field":"name"},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"cylinders","scale":{"zero":true}},"x":{"type":"nominal","field":"name"},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"weight_in_lbs","scale":{"zero":true}},"x":{"type":"nominal","field":"name"},"y":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","field":"acceleration","scale":{"zero":true}},"x":{"type":"nominal","field":"name"},"y":{"type":"nominal","field":"origin"}}}]},"id":{"pairId":6,"position":"right"},"vlSpec":{"data":{"url":"cars.json","format":{"type":"json"}},"mark":"point","encoding":{"x":{"field":"name","type":"nominal"},"y":{"field":"origin","type":"nominal"}}}}},{"id":7,"title":"","left":{"id":{"pairId":7,"position":"left"},"vlSpec":{"mark":"tick","encoding":{"x":{"scale":{"zero":true},"field":"miles_per_gallon","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[6],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(c_d_tick,_placeholder)","soft(continuous_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"}]},{"costs":[13],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"origin\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[13],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"cylinders\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[13],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"year\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[14],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,nominal)","field(5,\"origin\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(continuous_x,e0)","soft(nominal_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,5)"}]},{"costs":[14],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,nominal)","field(5,\"year\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(continuous_x,e0)","soft(nominal_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,5)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"cylinders\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"origin"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"year"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"year"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"cylinders","scale":{"zero":true}},"x":{"type":"quantitative","field":"miles_per_gallon","bin":true,"scale":{"zero":true}}}}]}},"right":{"id":{"pairId":7,"position":"right"},"vlSpec":{"mark":"tick","encoding":{"y":{"scale":{"zero":false},"field":"miles_per_gallon","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[9],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(zero_positional,_placeholder)","soft(only_x,_placeholder)","soft(c_d_tick,_placeholder)","soft(zero,e0)","soft(continuous_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Prefer to use only x instead of only y.","type":"soft","name":"only_x","asp":"soft(only_x) :- channel(_,y), not channel(_,x).","weight":1,"witness":"soft(only_x,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"}]},{"costs":[10],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(zero_positional,_placeholder)","soft(only_x,_placeholder)","soft(c_d_tick,_placeholder)","soft(log,e0)","log(e0)","soft(zero,e0)","soft(continuous_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Prefer to use only x instead of only y.","type":"soft","name":"only_x","asp":"soft(only_x) :- channel(_,y), not channel(_,x).","weight":1,"witness":"soft(only_x,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"weight_in_lbs\")","channel(5,x)","zero(5)","type(5,quantitative)","soft(orientation_binned,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_x,5)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,5)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"acceleration\")","channel(5,x)","zero(5)","type(5,quantitative)","soft(orientation_binned,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_x,5)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,5)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"displacement\")","channel(5,x)","zero(5)","type(5,quantitative)","soft(orientation_binned,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_x,5)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,5)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"horsepower\")","channel(5,x)","zero(5)","type(5,quantitative)","soft(orientation_binned,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_x,5)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,5)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"cylinders\")","channel(5,x)","zero(5)","type(5,quantitative)","soft(orientation_binned,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_x,5)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,5)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"miles_per_gallon","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"weight_in_lbs","scale":{"zero":true}},"y":{"type":"quantitative","field":"miles_per_gallon","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"acceleration","scale":{"zero":true}},"y":{"type":"quantitative","field":"miles_per_gallon","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"displacement","scale":{"zero":true}},"y":{"type":"quantitative","field":"miles_per_gallon","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","field":"miles_per_gallon","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"cylinders","scale":{"zero":true}},"y":{"type":"quantitative","field":"miles_per_gallon","bin":true}}}]}},"comp":"<"},{"id":8,"title":"","left":{"id":{"pairId":8,"position":"left"},"vlSpec":{"mark":"tick","encoding":{"x":{"scale":{"zero":true},"field":"horsepower","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[6],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(c_d_tick,_placeholder)","soft(continuous_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"}]},{"costs":[13],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"year\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[13],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"origin\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[13],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"cylinders\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[14],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,nominal)","field(5,\"year\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(continuous_x,e0)","soft(nominal_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,5)"}]},{"costs":[14],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,nominal)","field(5,\"origin\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(continuous_x,e0)","soft(nominal_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,5)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"displacement\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"year"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"year"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"displacement","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}}}}]}},"right":{"id":{"pairId":8,"position":"right"},"vlSpec":{"mark":"tick","encoding":{"x":{"scale":{"zero":false},"field":"horsepower","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[8],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(zero,e0)","soft(continuous_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"}]},{"costs":[9],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(log,e0)","log(e0)","soft(zero,e0)","soft(continuous_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"miles_per_gallon\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"displacement\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"weight_in_lbs\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"acceleration\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"horsepower\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"cylinders\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"horsepower","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"displacement","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"weight_in_lbs","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"acceleration","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"cylinders","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true}}}]}},"comp":"<"},{"id":9,"title":"","left":{"id":{"pairId":9,"position":"left"},"vlSpec":{"mark":"tick","encoding":{"y":{"scale":{"zero":false},"field":"cylinders","type":"ordinal"},"x":{"scale":{"zero":false},"field":"horsepower","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[16],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(log,e1)","log(e1)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[18],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e0,10)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(quant_bin,e0)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e0,10)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(quant_bin,e0)","soft(log,e1)","log(e1)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[28],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e0,25)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(bin_high,e0)","soft(quant_bin,e0)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer binning with at most 12 buckets.","type":"soft","name":"bin_high","asp":"soft(bin_high,E) :- bin(E,B), B > 12.","weight":10,"witness":"soft(bin_high,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[29],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e0,25)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(bin_high,e0)","soft(quant_bin,e0)","soft(log,e1)","log(e1)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer binning with at most 12 buckets.","type":"soft","name":"bin_high","asp":"soft(bin_high,E) :- bin(E,B), B > 12.","weight":10,"witness":"soft(bin_high,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[30],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","type(5,ordinal)","field(5,\"origin\")","channel(5,color)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(zero,e1)","soft(type_o,5)","soft(continuous_x,e1)","soft(ordered_y,e0)","soft(ordered_color,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","field":"horsepower","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders","bin":true},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders","bin":true},"x":{"type":"quantitative","field":"horsepower","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders","bin":{"maxbins":25}},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders","bin":{"maxbins":25}},"x":{"type":"quantitative","field":"horsepower","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"color":{"type":"ordinal","field":"origin"},"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}}]}},"right":{"id":{"pairId":9,"position":"right"},"vlSpec":{"mark":"tick","encoding":{"row":{"scale":{"zero":false},"field":"cylinders","type":"ordinal"},"x":{"scale":{"zero":true},"field":"horsepower","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[32],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","type(5,ordinal)","field(5,\"year\")","channel(5,y)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e1)","soft(ordered_y,5)","soft(ordered_row,e0)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"}]},{"costs":[32],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","type(5,ordinal)","field(5,\"origin\")","channel(5,y)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e1)","soft(ordered_y,5)","soft(ordered_row,e0)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"}]},{"costs":[33],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","type(5,nominal)","field(5,\"year\")","channel(5,y)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(continuous_x,e1)","soft(ordered_row,e0)","soft(nominal_y,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,5)"}]},{"costs":[33],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","type(5,nominal)","field(5,\"origin\")","channel(5,y)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(continuous_x,e1)","soft(ordered_row,e0)","soft(nominal_y,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,5)"}]},{"costs":[34],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e1,10)","field(5,\"miles_per_gallon\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e1)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e1)","soft(ordered_row,e0)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"}]},{"costs":[34],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e1,10)","field(5,\"displacement\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e1)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e1)","soft(ordered_row,e0)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"}]},{"costs":[34],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e1,10)","field(5,\"acceleration\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e1)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e1)","soft(ordered_row,e0)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"year"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"year"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"displacement","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"acceleration","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}}]}},"comp":"<"},{"id":10,"title":"","left":{"id":{"pairId":10,"position":"left"},"vlSpec":{"mark":"tick","encoding":{"x":{"scale":{"zero":true},"field":"miles_per_gallon","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[6],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(c_d_tick,_placeholder)","soft(continuous_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"}]},{"costs":[13],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"origin\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[13],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"cylinders\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[13],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"year\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[14],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,nominal)","field(5,\"origin\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(continuous_x,e0)","soft(nominal_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,5)"}]},{"costs":[14],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,nominal)","field(5,\"year\")","channel(5,y)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(continuous_x,e0)","soft(nominal_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,5)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","zero(e0)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"cylinders\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"origin"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"year"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"year"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"cylinders","scale":{"zero":true}},"x":{"type":"quantitative","field":"miles_per_gallon","bin":true,"scale":{"zero":true}}}}]}},"right":{"id":{"pairId":10,"position":"right"},"vlSpec":{"mark":"tick","encoding":{"x":{"scale":{"zero":false},"field":"miles_per_gallon","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[8],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(zero,e0)","soft(continuous_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"}]},{"costs":[9],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(log,e0)","log(e0)","soft(zero,e0)","soft(continuous_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"year\")","channel(5,y)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(zero,e0)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"origin\")","channel(5,y)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(zero,e0)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","type(5,ordinal)","field(5,\"cylinders\")","channel(5,y)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(zero,e0)","soft(type_o,5)","soft(continuous_x,e0)","soft(ordered_y,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"weight_in_lbs\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]},{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","bin(e0,10)","field(5,\"acceleration\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"year"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"origin"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"weight_in_lbs","scale":{"zero":true}},"x":{"type":"quantitative","field":"miles_per_gallon","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"acceleration","scale":{"zero":true}},"x":{"type":"quantitative","field":"miles_per_gallon","bin":true}}}]}},"comp":"<"},{"id":11,"title":"","left":{"id":{"pairId":11,"position":"left"},"vlSpec":{"mark":"bar","encoding":{"y":{"scale":{"zero":false},"field":"origin","type":"nominal"},"x":{"scale":{"zero":false},"type":"quantitative","aggregate":"count"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":null},"right":{"id":{"pairId":11,"position":"right"},"vlSpec":{"mark":"rule","encoding":{"row":{"scale":{"zero":false},"field":"origin","type":"nominal"},"x":{"scale":{"zero":true},"type":"quantitative","aggregate":"count"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":null},"comp":"<"},{"id":12,"title":"","left":{"id":{"pairId":12,"position":"left"},"vlSpec":{"mark":"bar","encoding":{"x":{"scale":{"zero":false},"field":"horsepower","type":"quantitative","aggregate":"mean"},"y":{"scale":{"zero":false},"field":"cylinders","type":"ordinal"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":null},"right":{"id":{"pairId":12,"position":"right"},"vlSpec":{"mark":"line","encoding":{"x":{"scale":{"zero":true},"field":"horsepower","type":"quantitative","aggregate":"mean"},"y":{"scale":{"zero":false},"field":"cylinders","type":"ordinal","aggregate":"min"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[40],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","aggregate(e1,min)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_o,e1)","soft(aggregate_mean,e0)","soft(aggregate_min,e1)","type(e0,quantitative)","type(e1,ordinal)","soft(continuous_x,e0)","soft(ordered_y,e1)","soft(c_d_no_overlap_line,_placeholder)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"}]},{"costs":[51],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","aggregate(e1,min)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_o,e1)","soft(aggregate_mean,e0)","soft(aggregate_min,e1)","type(e0,quantitative)","type(e1,ordinal)","soft(continuous_x,e0)","soft(ordered_y,e1)","aggregate(5,count)","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[52],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","aggregate(e1,min)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_o,e1)","soft(aggregate_mean,e0)","soft(aggregate_min,e1)","type(e0,quantitative)","type(e1,ordinal)","soft(continuous_x,e0)","soft(ordered_y,e1)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[53],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","aggregate(e1,min)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_o,e1)","soft(aggregate_mean,e0)","soft(aggregate_min,e1)","type(e0,quantitative)","type(e1,ordinal)","soft(continuous_x,e0)","soft(ordered_y,e1)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,5)","log(5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[55],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","aggregate(e1,min)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_o,e1)","soft(aggregate_mean,e0)","soft(aggregate_min,e1)","type(e0,quantitative)","type(e1,ordinal)","soft(continuous_x,e0)","soft(ordered_y,e1)","type(5,ordinal)","field(5,\"origin\")","channel(5,color)","soft(c_d_line,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(ordered_color,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark.","type":"soft","name":"c_d_line","asp":"soft(c_d_line) :- is_c_d, not no_overlap, mark(line).","weight":20,"witness":"soft(c_d_line,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"}]},{"costs":[55],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","aggregate(e1,min)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_o,e1)","soft(aggregate_mean,e0)","soft(aggregate_min,e1)","type(e0,quantitative)","type(e1,ordinal)","soft(continuous_x,e0)","soft(ordered_y,e1)","type(5,ordinal)","field(5,\"year\")","channel(5,color)","soft(c_d_line,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(ordered_color,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark.","type":"soft","name":"c_d_line","asp":"soft(c_d_line) :- is_c_d, not no_overlap, mark(line).","weight":20,"witness":"soft(c_d_line,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"}]},{"costs":[57],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","aggregate(e1,min)","channel(e0,x)","channel(e1,y)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_o,e1)","soft(aggregate_mean,e0)","soft(aggregate_min,e1)","type(e0,quantitative)","type(e1,ordinal)","soft(continuous_x,e0)","soft(ordered_y,e1)","type(5,nominal)","field(5,\"origin\")","channel(5,row)","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(c_d_no_overlap_line,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(nominal_row,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"type":"log","zero":false}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"ordinal","field":"origin"},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"ordinal","field":"year"},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"row":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"cylinders"}}}]}},"comp":"<"},{"id":13,"title":"","left":{"id":{"pairId":13,"position":"left"},"vlSpec":{"mark":"point","encoding":{"x":{"scale":{"zero":false},"field":"miles_per_gallon","type":"quantitative","aggregate":"mean"},"y":{"scale":{"zero":false},"field":"horsepower","type":"quantitative","aggregate":"mean"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[21],"facts":["data(\"cars.json\")","mark(point)","aggregate(e0,mean)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(aggregate_mean,e0)","soft(aggregate_mean,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_c_point,_placeholder)","soft(zero,e0)","soft(zero,e1)","soft(continuous_x,e0)","soft(continuous_y,e1)","soft(agg_dim,_placeholder)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"}]},{"costs":[22],"facts":["data(\"cars.json\")","mark(point)","aggregate(e0,mean)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(aggregate_mean,e0)","soft(aggregate_mean,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_c_point,_placeholder)","soft(zero,e0)","soft(zero,e1)","soft(continuous_x,e0)","soft(continuous_y,e1)","soft(agg_dim,_placeholder)","soft(log,e1)","log(e1)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"}]},{"costs":[22],"facts":["data(\"cars.json\")","mark(point)","aggregate(e0,mean)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(aggregate_mean,e0)","soft(aggregate_mean,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_c_point,_placeholder)","soft(zero,e0)","soft(zero,e1)","soft(continuous_x,e0)","soft(continuous_y,e1)","soft(agg_dim,_placeholder)","soft(log,e0)","log(e0)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e0)"}]},{"costs":[23],"facts":["data(\"cars.json\")","mark(point)","aggregate(e0,mean)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(aggregate_mean,e0)","soft(aggregate_mean,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_c_point,_placeholder)","soft(zero,e0)","soft(zero,e1)","soft(continuous_x,e0)","soft(continuous_y,e1)","soft(agg_dim,_placeholder)","soft(log,e0)","log(e0)","soft(log,e1)","log(e1)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e0)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"}]},{"costs":[24],"facts":["data(\"cars.json\")","mark(point)","aggregate(e0,mean)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(aggregate_mean,e0)","soft(aggregate_mean,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_c_point,_placeholder)","soft(zero,e0)","soft(zero,e1)","soft(continuous_x,e0)","soft(continuous_y,e1)","aggregate(5,count)","channel(5,size)","zero(5)","type(5,quantitative)","soft(agg_dim,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(high_cardinality_size,e0)","soft(type_q,5)","soft(continuous_size,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use size when the cardinality is large on x or y.","type":"soft","name":"high_cardinality_size","asp":"soft(high_cardinality_size,E) :- continuous(E), channel(_,size), enc_cardinality(E,C), C > 100, channel(E,(x;y)).","weight":1,"witness":"soft(high_cardinality_size,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[25],"facts":["data(\"cars.json\")","mark(point)","aggregate(e0,mean)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(aggregate_mean,e0)","soft(aggregate_mean,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_c_point,_placeholder)","soft(zero,e0)","soft(zero,e1)","soft(continuous_x,e0)","soft(continuous_y,e1)","aggregate(5,count)","channel(5,size)","zero(5)","type(5,quantitative)","soft(agg_dim,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,e1)","log(e1)","soft(high_cardinality_size,e0)","soft(type_q,5)","soft(continuous_size,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Prefer not to use size when the cardinality is large on x or y.","type":"soft","name":"high_cardinality_size","asp":"soft(high_cardinality_size,E) :- continuous(E), channel(_,size), enc_cardinality(E,C), C > 100, channel(E,(x;y)).","weight":1,"witness":"soft(high_cardinality_size,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[25],"facts":["data(\"cars.json\")","mark(point)","aggregate(e0,mean)","aggregate(e1,mean)","channel(e0,x)","channel(e1,y)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(aggregate,e0)","soft(aggregate,e1)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","soft(aggregate_mean,e0)","soft(aggregate_mean,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_c_point,_placeholder)","soft(zero,e0)","soft(zero,e1)","soft(continuous_x,e0)","soft(continuous_y,e1)","aggregate(5,count)","channel(5,size)","zero(5)","type(5,quantitative)","soft(agg_dim,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,e0)","log(e0)","soft(high_cardinality_size,e0)","soft(type_q,5)","soft(continuous_size,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by continuous for point mark.","type":"soft","name":"c_c_point","asp":"soft(c_c_point) :- is_c_c, mark(point).","weight":0,"witness":"soft(c_c_point,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e0)"},{"description":"Prefer not to use size when the cardinality is large on x or y.","type":"soft","name":"high_cardinality_size","asp":"soft(high_cardinality_size,E) :- continuous(E), channel(_,size), enc_cardinality(E,C), C > 100, channel(E,(x;y)).","weight":1,"witness":"soft(high_cardinality_size,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"zero":false}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"zero":false}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"type":"log","zero":false}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"type":"log","zero":false}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"zero":false}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"zero":false}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"type":"log","zero":false}},"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}}}}]}},"right":{"id":{"pairId":13,"position":"right"},"vlSpec":{"mark":"area","encoding":{"y":{"scale":{"zero":true},"field":"miles_per_gallon","type":"quantitative"},"x":{"scale":{"zero":true},"field":"horsepower","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[32],"facts":["data(\"cars.json\")","mark(area)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","type(e0,quantitative)","type(e1,quantitative)","soft(c_c_area,_placeholder)","soft(continuous_x,e1)","soft(continuous_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"}]},{"costs":[37],"facts":["data(\"cars.json\")","mark(area)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","type(e0,quantitative)","type(e1,quantitative)","bin(e1,10)","aggregate(e0,mean)","soft(c_d_no_overlap_area,_placeholder)","soft(aggregate,e0)","soft(bin,e1)","soft(continuous_y,e0)","soft(ordered_x,e1)","soft(aggregate_mean,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Continuous by discrete for area mark with no overlap.","type":"soft","name":"c_d_no_overlap_area","asp":"soft(c_d_no_overlap_area) :- is_c_d, no_overlap, mark(area).","weight":20,"witness":"soft(c_d_no_overlap_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"}]},{"costs":[37],"facts":["data(\"cars.json\")","mark(area)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","type(e0,quantitative)","type(e1,quantitative)","bin(e0,10)","aggregate(e1,mean)","soft(orientation_binned,_placeholder)","soft(c_d_no_overlap_area,_placeholder)","soft(aggregate,e1)","soft(bin,e0)","soft(continuous_x,e1)","soft(ordered_y,e0)","soft(aggregate_mean,e1)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Continuous by discrete for area mark with no overlap.","type":"soft","name":"c_d_no_overlap_area","asp":"soft(c_d_no_overlap_area) :- is_c_d, no_overlap, mark(area).","weight":20,"witness":"soft(c_d_no_overlap_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"}]},{"costs":[38],"facts":["data(\"cars.json\")","mark(area)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","type(e0,quantitative)","type(e1,quantitative)","aggregate(e0,mean)","aggregate(e1,mean)","soft(agg_dim,_placeholder)","soft(c_c_area,_placeholder)","soft(aggregate,e0)","soft(aggregate,e1)","soft(continuous_x,e1)","soft(continuous_y,e0)","soft(aggregate_mean,e0)","soft(aggregate_mean,e1)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Aggregate should also have a discrete encoding to group by.","type":"soft","name":"agg_dim","asp":"soft(agg_dim) :- aggregate(_,_), not discrete(_).","weight":2,"witness":"soft(agg_dim,_placeholder)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"}]},{"costs":[38],"facts":["data(\"cars.json\")","mark(area)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","type(e0,quantitative)","type(e1,quantitative)","bin(e0,10)","aggregate(e1,sum)","soft(orientation_binned,_placeholder)","soft(c_d_no_overlap_area,_placeholder)","soft(aggregate,e1)","soft(bin,e0)","soft(continuous_x,e1)","soft(ordered_y,e0)","soft(aggregate_sum,e1)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Continuous by discrete for area mark with no overlap.","type":"soft","name":"c_d_no_overlap_area","asp":"soft(c_d_no_overlap_area) :- is_c_d, no_overlap, mark(area).","weight":20,"witness":"soft(c_d_no_overlap_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Sum as aggregate op.","type":"soft","name":"aggregate_sum","asp":"soft(aggregate_sum,E) :- aggregate(E,sum).","weight":2,"witness":"soft(aggregate_sum,e1)"}]},{"costs":[38],"facts":["data(\"cars.json\")","mark(area)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","type(e0,quantitative)","type(e1,quantitative)","bin(e1,10)","aggregate(e0,sum)","soft(c_d_no_overlap_area,_placeholder)","soft(aggregate,e0)","soft(bin,e1)","soft(continuous_y,e0)","soft(ordered_x,e1)","soft(aggregate_sum,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Continuous by discrete for area mark with no overlap.","type":"soft","name":"c_d_no_overlap_area","asp":"soft(c_d_no_overlap_area) :- is_c_d, no_overlap, mark(area).","weight":20,"witness":"soft(c_d_no_overlap_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Sum as aggregate op.","type":"soft","name":"aggregate_sum","asp":"soft(aggregate_sum,E) :- aggregate(E,sum).","weight":2,"witness":"soft(aggregate_sum,e0)"}]},{"costs":[39],"facts":["data(\"cars.json\")","mark(area)","zero(e0)","zero(e1)","channel(e0,y)","channel(e1,x)","field(e0,\"miles_per_gallon\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e0)","soft(type_q,e1)","type(e0,quantitative)","type(e1,quantitative)","bin(e0,10)","aggregate(e1,median)","soft(orientation_binned,_placeholder)","soft(c_d_no_overlap_area,_placeholder)","soft(aggregate,e1)","soft(bin,e0)","soft(continuous_x,e1)","soft(ordered_y,e0)","soft(aggregate_median,e1)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.","type":"soft","name":"orientation_binned","asp":"soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).","weight":1,"witness":"soft(orientation_binned,_placeholder)"},{"description":"Continuous by discrete for area mark with no overlap.","type":"soft","name":"c_d_no_overlap_area","asp":"soft(c_d_no_overlap_area) :- is_c_d, no_overlap, mark(area).","weight":20,"witness":"soft(c_d_no_overlap_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Median as aggregate op.","type":"soft","name":"aggregate_median","asp":"soft(aggregate_median,E) :- aggregate(E,median).","weight":3,"witness":"soft(aggregate_median,e1)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"y":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"y":{"type":"quantitative","field":"miles_per_gallon","bin":true,"scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"y":{"type":"quantitative","field":"miles_per_gallon","bin":true,"scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"sum","field":"horsepower","scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"y":{"type":"quantitative","aggregate":"sum","field":"miles_per_gallon","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"y":{"type":"quantitative","field":"miles_per_gallon","bin":true,"scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"median","field":"horsepower","scale":{"zero":true}}}}]}},"comp":"<"},{"id":14,"title":"","left":{"id":{"pairId":14,"position":"left"},"vlSpec":{"mark":"bar","encoding":{"x":{"scale":{"zero":false},"field":"origin","type":"nominal"},"y":{"scale":{"zero":false},"type":"quantitative","aggregate":"count"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":null},"right":{"id":{"pairId":14,"position":"right"},"vlSpec":{"mark":"rule","encoding":{"x":{"scale":{"zero":false},"field":"origin","type":"nominal"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":null},"comp":"<"},{"id":15,"title":"","left":{"id":{"pairId":15,"position":"left"},"vlSpec":{"mark":"bar","encoding":{"y":{"scale":{"zero":false},"field":"cylinders","type":"ordinal"},"x":{"scale":{"zero":false},"type":"quantitative","aggregate":"count"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":null},"right":{"id":{"pairId":15,"position":"right"},"vlSpec":{"mark":"rule","encoding":{"row":{"scale":{"zero":false},"field":"cylinders","type":"ordinal","aggregate":"min"},"x":{"scale":{"zero":true},"type":"quantitative","aggregate":"count"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":null},"comp":"<"},{"id":16,"title":"","left":{"id":{"pairId":16,"position":"left"},"vlSpec":{"mark":"bar","encoding":{"y":{"scale":{"zero":false},"field":"origin","type":"nominal"},"x":{"scale":{"zero":false},"type":"quantitative","aggregate":"count"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":null},"right":{"id":{"pairId":16,"position":"right"},"vlSpec":{"mark":"area","encoding":{"x":{"scale":{"zero":true},"type":"quantitative","aggregate":"count"},"y":{"scale":{"zero":true},"type":"quantitative","aggregate":"count"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":null},"comp":"<"},{"id":17,"title":"","left":{"id":{"pairId":17,"position":"left"},"vlSpec":{"mark":"point","encoding":{"y":{"scale":{"zero":false},"field":"origin","type":"ordinal"},"size":{"scale":{"zero":false},"field":"horsepower","type":"quantitative","aggregate":"mean"},"x":{"scale":{"zero":false},"field":"acceleration","type":"quantitative","bin":{"maxbins":10}}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[29],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","soft(ordered_y,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[30],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","soft(log,e1)","log(e1)","soft(ordered_y,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[32],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","bin(e0,10)","soft(bin,e0)","soft(quant_bin,e0)","soft(ordered_y,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[33],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","aggregate(e0,median)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_median,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Median as aggregate op.","type":"soft","name":"aggregate_median","asp":"soft(aggregate_median,E) :- aggregate(E,median).","weight":3,"witness":"soft(aggregate_median,e0)"}]},{"costs":[33],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","bin(e0,10)","soft(bin,e0)","soft(quant_bin,e0)","soft(log,e1)","log(e1)","soft(ordered_y,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[34],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","aggregate(e0,max)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_max,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Max as aggregate op.","type":"soft","name":"aggregate_max","asp":"soft(aggregate_max,E) :- aggregate(E,max).","weight":4,"witness":"soft(aggregate_max,e0)"}]},{"costs":[34],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_mean,e1)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","aggregate(e0,min)","soft(aggregate,e0)","soft(ordered_y,e0)","soft(aggregate_min,e0)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"ordinal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"type":"log","zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"ordinal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"ordinal","field":"origin","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"ordinal","aggregate":"median","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"type":"log","zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"ordinal","field":"origin","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"ordinal","aggregate":"max","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"ordinal","aggregate":"min","field":"origin"}}}]}},"right":{"id":{"pairId":17,"position":"right"},"vlSpec":{"mark":"area","encoding":{"row":{"scale":{"zero":false},"field":"origin","type":"ordinal","aggregate":"min"},"y":{"scale":{"zero":true},"field":"horsepower","type":"quantitative","aggregate":"min"},"x":{"scale":{"zero":true},"field":"acceleration","type":"quantitative","aggregate":"min"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[66],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e0,min)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_min,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(ordered_row,e0)","soft(c_c_area,_placeholder)","soft(continuous_x,e2)","soft(continuous_y,e1)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"}]},{"costs":[77],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e0,min)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_min,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(ordered_row,e0)","aggregate(5,count)","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_x,e2)","soft(continuous_y,e1)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[78],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e0,min)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_min,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(ordered_row,e0)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_x,e2)","soft(continuous_y,e1)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[79],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e0,min)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_min,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(ordered_row,e0)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,5)","log(5)","soft(zero,5)","soft(type_q,5)","soft(continuous_x,e2)","soft(continuous_y,e1)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[84],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e0,min)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_min,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(ordered_row,e0)","aggregate(5,mean)","field(5,\"weight_in_lbs\")","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_x,e2)","soft(continuous_y,e1)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[84],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e0,min)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_min,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(ordered_row,e0)","aggregate(5,mean)","field(5,\"cylinders\")","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_x,e2)","soft(continuous_y,e1)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[84],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e0,min)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(type_q,e1)","soft(type_q,e2)","soft(type_o,e0)","soft(aggregate_min,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,ordinal)","type(e1,quantitative)","type(e2,quantitative)","soft(ordered_row,e0)","aggregate(5,mean)","field(5,\"miles_per_gallon\")","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_x,e2)","soft(continuous_y,e1)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e1)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"y":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"ordinal","aggregate":"min","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"ordinal","aggregate":"min","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"y":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"ordinal","aggregate":"min","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"type":"log","zero":false}},"y":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"ordinal","aggregate":"min","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"weight_in_lbs","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"ordinal","aggregate":"min","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"cylinders","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"ordinal","aggregate":"min","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"ordinal","aggregate":"min","field":"origin"}}}]}},"comp":"<"},{"id":18,"title":"","left":{"id":{"pairId":18,"position":"left"},"vlSpec":{"mark":"point","encoding":{"y":{"scale":{"zero":false},"field":"cylinders","type":"nominal"},"size":{"scale":{"zero":false},"field":"horsepower","type":"quantitative","aggregate":"mean"},"x":{"scale":{"zero":false},"field":"acceleration","type":"quantitative","bin":{"maxbins":10}}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[40],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"}]},{"costs":[41],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","soft(log,e1)","log(e1)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"}]},{"costs":[54],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","aggregate(5,count)","channel(5,color)","zero(5)","type(5,quantitative)","soft(multiple_non_pos,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer not to use multiple non-positional encoding channels.","type":"soft","name":"multiple_non_pos","asp":"soft(multiple_non_pos) :- {channel(_,C): non_positional(C)} > 1.","weight":3,"witness":"soft(multiple_non_pos,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[55],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","aggregate(5,count)","channel(5,color)","zero(5)","type(5,quantitative)","soft(multiple_non_pos,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,e1)","log(e1)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer not to use multiple non-positional encoding channels.","type":"soft","name":"multiple_non_pos","asp":"soft(multiple_non_pos) :- {channel(_,C): non_positional(C)} > 1.","weight":3,"witness":"soft(multiple_non_pos,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[55],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(multiple_non_pos,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer not to use multiple non-positional encoding channels.","type":"soft","name":"multiple_non_pos","asp":"soft(multiple_non_pos) :- {channel(_,C): non_positional(C)} > 1.","weight":3,"witness":"soft(multiple_non_pos,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[56],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(multiple_non_pos,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,e1)","log(e1)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer not to use multiple non-positional encoding channels.","type":"soft","name":"multiple_non_pos","asp":"soft(multiple_non_pos) :- {channel(_,C): non_positional(C)} > 1.","weight":3,"witness":"soft(multiple_non_pos,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[56],"facts":["data(\"cars.json\")","mark(point)","aggregate(e1,mean)","bin(e2,10)","channel(e0,y)","channel(e1,size)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e1)","soft(bin,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_y,e0)","soft(aggregate_mean,e1)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e1)","soft(continuous_size,e1)","soft(ordered_x,e2)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(multiple_non_pos,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,5)","log(5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e1)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e1)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e2)"},{"description":"Prefer not to use multiple non-positional encoding channels.","type":"soft","name":"multiple_non_pos","asp":"soft(multiple_non_pos) :- {channel(_,C): non_positional(C)} > 1.","weight":3,"witness":"soft(multiple_non_pos,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"type":"log","zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"type":"log","zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"type":"log","zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"type":"log","zero":false}},"size":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":false}},"x":{"type":"quantitative","field":"acceleration","bin":true},"y":{"type":"nominal","field":"cylinders"}}}]}},"right":{"id":{"pairId":18,"position":"right"},"vlSpec":{"mark":"area","encoding":{"row":{"scale":{"zero":false},"field":"cylinders","type":"nominal"},"x":{"scale":{"zero":true},"field":"horsepower","type":"quantitative","aggregate":"min"},"y":{"scale":{"zero":true},"field":"acceleration","type":"quantitative","aggregate":"min"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[69],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,x)","channel(e2,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","soft(c_c_area,_placeholder)","soft(continuous_x,e1)","soft(continuous_y,e2)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e2)"}]},{"costs":[80],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,x)","channel(e2,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","aggregate(5,count)","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_x,e1)","soft(continuous_y,e2)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e2)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[81],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,x)","channel(e2,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_x,e1)","soft(continuous_y,e2)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e2)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[82],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,x)","channel(e2,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,5)","log(5)","soft(zero,5)","soft(type_q,5)","soft(continuous_x,e1)","soft(continuous_y,e2)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e2)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[87],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,x)","channel(e2,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","aggregate(5,mean)","field(5,\"miles_per_gallon\")","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_x,e1)","soft(continuous_y,e2)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e2)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[87],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,x)","channel(e2,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","aggregate(5,mean)","field(5,\"displacement\")","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_x,e1)","soft(continuous_y,e2)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e2)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[87],"facts":["data(\"cars.json\")","mark(area)","zero(e1)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,x)","channel(e2,y)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e1)","soft(type_q,e2)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,quantitative)","type(e2,quantitative)","aggregate(5,mean)","field(5,\"weight_in_lbs\")","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_c_area,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_x,e1)","soft(continuous_y,e2)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous by continuous for area mark.","type":"soft","name":"c_c_area","asp":"soft(c_c_area) :- is_c_c, mark(area).","weight":20,"witness":"soft(c_c_area,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,e2)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"x":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"x":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"type":"log","zero":false}},"x":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"displacement","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"area","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"weight_in_lbs","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"horsepower","scale":{"zero":true}},"y":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"row":{"type":"nominal","field":"cylinders"}}}]}},"comp":"<"},{"id":19,"title":"","left":{"id":{"pairId":19,"position":"left"},"vlSpec":{"mark":"bar","encoding":{"x":{"scale":{"zero":false},"field":"miles_per_gallon","type":"quantitative","bin":{"maxbins":5}},"y":{"scale":{"zero":false},"type":"quantitative","aggregate":"count"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":null},"right":{"id":{"pairId":19,"position":"right"},"vlSpec":{"mark":"bar","encoding":{"x":{"scale":{"zero":false},"field":"miles_per_gallon","type":"quantitative","bin":{"maxbins":10}}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[10],"facts":["data(\"cars.json\")","mark(bar)","bin(e0,10)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(bin,e0)","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(ordered_x,e0)","aggregate(5,count)","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_y,5)","soft(aggregate_count,5)"],"violations":[{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[17],"facts":["data(\"cars.json\")","mark(bar)","bin(e0,10)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(bin,e0)","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(ordered_x,e0)","aggregate(5,mean)","field(5,\"cylinders\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[17],"facts":["data(\"cars.json\")","mark(bar)","bin(e0,10)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(bin,e0)","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(ordered_x,e0)","aggregate(5,mean)","field(5,\"horsepower\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[17],"facts":["data(\"cars.json\")","mark(bar)","bin(e0,10)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(bin,e0)","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(ordered_x,e0)","aggregate(5,mean)","field(5,\"displacement\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[17],"facts":["data(\"cars.json\")","mark(bar)","bin(e0,10)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(bin,e0)","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(ordered_x,e0)","aggregate(5,mean)","field(5,\"weight_in_lbs\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[17],"facts":["data(\"cars.json\")","mark(bar)","bin(e0,10)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(bin,e0)","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(ordered_x,e0)","aggregate(5,mean)","field(5,\"acceleration\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[18],"facts":["data(\"cars.json\")","mark(bar)","bin(e0,10)","channel(e0,x)","field(e0,\"miles_per_gallon\")","soft(bin,e0)","soft(encoding,e0)","soft(encoding_field,e0)","soft(type_q,e0)","type(e0,quantitative)","soft(ordered_x,e0)","aggregate(5,sum)","field(5,\"cylinders\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_bar,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(aggregate_sum,5)"],"violations":[{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e0)"},{"description":"Continuous by discrete for bar mark with no overlap.","type":"soft","name":"c_d_no_overlap_bar","asp":"soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).","weight":0,"witness":"soft(c_d_no_overlap_bar,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Sum as aggregate op.","type":"soft","name":"aggregate_sum","asp":"soft(aggregate_sum,E) :- aggregate(E,sum).","weight":2,"witness":"soft(aggregate_sum,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","field":"miles_per_gallon","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"cylinders","scale":{"zero":true}},"x":{"type":"quantitative","field":"miles_per_gallon","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"x":{"type":"quantitative","field":"miles_per_gallon","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"displacement","scale":{"zero":true}},"x":{"type":"quantitative","field":"miles_per_gallon","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"weight_in_lbs","scale":{"zero":true}},"x":{"type":"quantitative","field":"miles_per_gallon","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"zero":true}},"x":{"type":"quantitative","field":"miles_per_gallon","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"bar","encoding":{"y":{"type":"quantitative","aggregate":"sum","field":"cylinders","scale":{"zero":true}},"x":{"type":"quantitative","field":"miles_per_gallon","bin":true}}}]}},"comp":"<"},{"id":20,"title":"","left":{"id":{"pairId":20,"position":"left"},"vlSpec":{"mark":"tick","encoding":{"y":{"scale":{"zero":false},"field":"origin","type":"nominal"},"x":{"scale":{"zero":false},"field":"horsepower","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[16],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(zero,e1)","soft(continuous_x,e1)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"}]},{"costs":[17],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(log,e1)","log(e1)","soft(zero,e1)","soft(continuous_x,e1)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"}]},{"costs":[31],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,quantitative)","type(5,ordinal)","field(5,\"cylinders\")","channel(5,color)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(zero,e1)","soft(type_o,5)","soft(continuous_x,e1)","soft(ordered_color,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"}]},{"costs":[31],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,quantitative)","type(5,ordinal)","field(5,\"year\")","channel(5,color)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(zero,e1)","soft(type_o,5)","soft(continuous_x,e1)","soft(ordered_color,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"}]},{"costs":[32],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,quantitative)","field(5,\"cylinders\")","channel(5,color)","zero(5)","type(5,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(zero,e1)","soft(type_q,5)","soft(continuous_x,e1)","soft(continuous_color,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"}]},{"costs":[32],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,quantitative)","field(5,\"acceleration\")","channel(5,color)","zero(5)","type(5,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(zero,e1)","soft(type_q,5)","soft(continuous_x,e1)","soft(continuous_color,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"}]},{"costs":[32],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_y,e0)","type(e0,nominal)","type(e1,quantitative)","field(5,\"miles_per_gallon\")","channel(5,color)","zero(5)","type(5,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(zero,e1)","soft(type_q,5)","soft(continuous_x,e1)","soft(continuous_color,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"color":{"type":"ordinal","field":"cylinders"},"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"color":{"type":"ordinal","field":"year"},"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"color":{"type":"quantitative","field":"cylinders","scale":{"zero":true}},"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"color":{"type":"quantitative","field":"acceleration","scale":{"zero":true}},"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"color":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}},"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}}]}},"right":{"id":{"pairId":20,"position":"right"},"vlSpec":{"mark":"tick","encoding":{"row":{"scale":{"zero":false},"field":"origin","type":"nominal"},"x":{"scale":{"zero":true},"field":"horsepower","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[30],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_row,e0)","type(e0,nominal)","type(e1,quantitative)","type(5,ordinal)","field(5,\"cylinders\")","channel(5,y)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e1)","soft(ordered_y,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[30],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_row,e0)","type(e0,nominal)","type(e1,quantitative)","type(5,ordinal)","field(5,\"year\")","channel(5,y)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e1)","soft(ordered_y,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"}]},{"costs":[31],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_row,e0)","type(e0,nominal)","type(e1,quantitative)","type(5,nominal)","field(5,\"year\")","channel(5,y)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(continuous_x,e1)","soft(nominal_y,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,5)"}]},{"costs":[32],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_row,e0)","type(e0,nominal)","type(e1,quantitative)","bin(e1,10)","field(5,\"weight_in_lbs\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e1)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e1)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"}]},{"costs":[32],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_row,e0)","type(e0,nominal)","type(e1,quantitative)","bin(e1,10)","field(5,\"cylinders\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e1)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e1)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"}]},{"costs":[32],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_row,e0)","type(e0,nominal)","type(e1,quantitative)","bin(e1,10)","field(5,\"displacement\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e1)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e1)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"}]},{"costs":[32],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"origin\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_n,e0)","soft(nominal_row,e0)","type(e0,nominal)","type(e1,quantitative)","bin(e1,10)","field(5,\"miles_per_gallon\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e1)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e1)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"year"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"year"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"weight_in_lbs","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"cylinders","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"displacement","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"row":{"type":"nominal","field":"origin"}}}]}},"comp":"<"},{"id":21,"title":"","left":{"id":{"pairId":21,"position":"left"},"vlSpec":{"mark":"bar","encoding":{"x":{"scale":{"zero":false},"field":"horsepower","type":"quantitative","aggregate":"mean"},"y":{"scale":{"zero":false},"field":"cylinders","type":"nominal"},"row":{"scale":{"zero":false},"field":"origin","type":"nominal"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":null},"right":{"id":{"pairId":21,"position":"right"},"vlSpec":{"mark":"line","encoding":{"x":{"scale":{"zero":true},"field":"horsepower","type":"quantitative","aggregate":"mean"},"y":{"scale":{"zero":false},"field":"cylinders","type":"nominal"},"row":{"scale":{"zero":false},"field":"origin","type":"nominal"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[63],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","channel(e0,x)","channel(e1,y)","channel(e2,row)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","field(e2,\"origin\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e1)","soft(type_q,e0)","soft(type_n,e1)","soft(type_n,e2)","soft(nominal_y,e1)","soft(nominal_row,e2)","soft(aggregate_mean,e0)","type(e0,quantitative)","type(e1,nominal)","type(e2,nominal)","soft(continuous_x,e0)","soft(c_d_no_overlap_line,_placeholder)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e2)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e2)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"}]},{"costs":[74],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","channel(e0,x)","channel(e1,y)","channel(e2,row)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","field(e2,\"origin\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e1)","soft(type_q,e0)","soft(type_n,e1)","soft(type_n,e2)","soft(nominal_y,e1)","soft(nominal_row,e2)","soft(aggregate_mean,e0)","type(e0,quantitative)","type(e1,nominal)","type(e2,nominal)","soft(continuous_x,e0)","aggregate(5,count)","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e2)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e2)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[75],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","channel(e0,x)","channel(e1,y)","channel(e2,row)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","field(e2,\"origin\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e1)","soft(type_q,e0)","soft(type_n,e1)","soft(type_n,e2)","soft(nominal_y,e1)","soft(nominal_row,e2)","soft(aggregate_mean,e0)","type(e0,quantitative)","type(e1,nominal)","type(e2,nominal)","soft(continuous_x,e0)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e2)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e2)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[76],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","channel(e0,x)","channel(e1,y)","channel(e2,row)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","field(e2,\"origin\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e1)","soft(type_q,e0)","soft(type_n,e1)","soft(type_n,e2)","soft(nominal_y,e1)","soft(nominal_row,e2)","soft(aggregate_mean,e0)","type(e0,quantitative)","type(e1,nominal)","type(e2,nominal)","soft(continuous_x,e0)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,5)","log(5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e2)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e2)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[78],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","channel(e0,x)","channel(e1,y)","channel(e2,row)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","field(e2,\"origin\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e1)","soft(type_q,e0)","soft(type_n,e1)","soft(type_n,e2)","soft(nominal_y,e1)","soft(nominal_row,e2)","soft(aggregate_mean,e0)","type(e0,quantitative)","type(e1,nominal)","type(e2,nominal)","soft(continuous_x,e0)","type(5,ordinal)","field(5,\"year\")","channel(5,color)","soft(c_d_line,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(ordered_color,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e2)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e2)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous by discrete for line mark.","type":"soft","name":"c_d_line","asp":"soft(c_d_line) :- is_c_d, not no_overlap, mark(line).","weight":20,"witness":"soft(c_d_line,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"}]},{"costs":[81],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","channel(e0,x)","channel(e1,y)","channel(e2,row)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","field(e2,\"origin\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e1)","soft(type_q,e0)","soft(type_n,e1)","soft(type_n,e2)","soft(nominal_y,e1)","soft(nominal_row,e2)","soft(aggregate_mean,e0)","type(e0,quantitative)","type(e1,nominal)","type(e2,nominal)","soft(continuous_x,e0)","field(5,\"acceleration\")","channel(5,color)","aggregate(5,mean)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e2)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e2)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[81],"facts":["data(\"cars.json\")","mark(line)","zero(e0)","aggregate(e0,mean)","channel(e0,x)","channel(e1,y)","channel(e2,row)","field(e0,\"horsepower\")","field(e1,\"cylinders\")","field(e2,\"origin\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e0)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e1)","soft(type_q,e0)","soft(type_n,e1)","soft(type_n,e2)","soft(nominal_y,e1)","soft(nominal_row,e2)","soft(aggregate_mean,e0)","type(e0,quantitative)","type(e1,nominal)","type(e2,nominal)","soft(continuous_x,e0)","field(5,\"displacement\")","channel(5,color)","aggregate(5,mean)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e2)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,e1)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e2)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e0)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e0)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"cylinders"},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"cylinders"},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"cylinders"},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"type":"log","zero":false}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"cylinders"},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"ordinal","field":"year"},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"cylinders"},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"cylinders"},"row":{"type":"nominal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"displacement","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"mean","field":"horsepower","scale":{"zero":true}},"y":{"type":"nominal","field":"cylinders"},"row":{"type":"nominal","field":"origin"}}}]}},"comp":"<"},{"id":22,"title":"","left":{"id":{"pairId":22,"position":"left"},"vlSpec":{"mark":"point","encoding":{"x":{"scale":{"zero":false},"field":"cylinders","type":"nominal"},"y":{"scale":{"zero":false},"field":"origin","type":"ordinal"},"size":{"scale":{"zero":false},"field":"acceleration","type":"quantitative","aggregate":"mean"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[41],"facts":["data(\"cars.json\")","mark(point)","aggregate(e2,mean)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e2)","soft(continuous_size,e2)","soft(ordered_y,e1)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e2)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"}]},{"costs":[42],"facts":["data(\"cars.json\")","mark(point)","aggregate(e2,mean)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e2)","soft(continuous_size,e2)","soft(log,e2)","log(e2)","soft(ordered_y,e1)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e2)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"}]},{"costs":[44],"facts":["data(\"cars.json\")","mark(point)","aggregate(e2,mean)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e2)","soft(continuous_size,e2)","bin(e1,10)","soft(bin,e1)","soft(quant_bin,e1)","soft(ordered_y,e1)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e2)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"}]},{"costs":[45],"facts":["data(\"cars.json\")","mark(point)","aggregate(e2,mean)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e2)","soft(continuous_size,e2)","aggregate(e1,median)","soft(aggregate,e1)","soft(ordered_y,e1)","soft(aggregate_median,e1)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e2)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Median as aggregate op.","type":"soft","name":"aggregate_median","asp":"soft(aggregate_median,E) :- aggregate(E,median).","weight":3,"witness":"soft(aggregate_median,e1)"}]},{"costs":[45],"facts":["data(\"cars.json\")","mark(point)","aggregate(e2,mean)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e2)","soft(continuous_size,e2)","bin(e1,10)","soft(bin,e1)","soft(quant_bin,e1)","soft(log,e2)","log(e2)","soft(ordered_y,e1)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e2)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e1)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"}]},{"costs":[46],"facts":["data(\"cars.json\")","mark(point)","aggregate(e2,mean)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e2)","soft(continuous_size,e2)","aggregate(e1,max)","soft(aggregate,e1)","soft(ordered_y,e1)","soft(aggregate_max,e1)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e2)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Max as aggregate op.","type":"soft","name":"aggregate_max","asp":"soft(aggregate_max,E) :- aggregate(E,max).","weight":4,"witness":"soft(aggregate_max,e1)"}]},{"costs":[46],"facts":["data(\"cars.json\")","mark(point)","aggregate(e2,mean)","channel(e0,x)","channel(e1,y)","channel(e2,size)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(d_d_point,_placeholder)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_x,e0)","soft(aggregate_mean,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(zero_size,_placeholder)","soft(zero,e2)","soft(continuous_size,e2)","aggregate(e1,min)","soft(aggregate,e1)","soft(ordered_y,e1)","soft(aggregate_min,e1)"],"violations":[{"description":"Discrete by discrete for point mark.","type":"soft","name":"d_d_point","asp":"soft(d_d_point) :- is_d_d, mark(point).","weight":0,"witness":"soft(d_d_point,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on x channel.","type":"soft","name":"nominal_x","asp":"soft(nominal_x,E) :- channel(E,x), type(E,nominal).","weight":3,"witness":"soft(nominal_x,e0)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,e2)"},{"description":"Prefer zero size (even when binned).","type":"soft","name":"zero_size","asp":"soft(zero_size) :- channel(E,size), not zero(E).","weight":3,"witness":"soft(zero_size,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e2)"},{"description":"Continuous on size channel.","type":"soft","name":"continuous_size","asp":"soft(continuous_size,E) :- channel(E,size), continuous(E).","weight":1,"witness":"soft(continuous_size,e2)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"zero":false}},"x":{"type":"nominal","field":"cylinders"},"y":{"type":"ordinal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"type":"log","zero":false}},"x":{"type":"nominal","field":"cylinders"},"y":{"type":"ordinal","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"zero":false}},"x":{"type":"nominal","field":"cylinders"},"y":{"type":"ordinal","field":"origin","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"zero":false}},"x":{"type":"nominal","field":"cylinders"},"y":{"type":"ordinal","aggregate":"median","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"type":"log","zero":false}},"x":{"type":"nominal","field":"cylinders"},"y":{"type":"ordinal","field":"origin","bin":true}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"zero":false}},"x":{"type":"nominal","field":"cylinders"},"y":{"type":"ordinal","aggregate":"max","field":"origin"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"point","encoding":{"size":{"type":"quantitative","aggregate":"mean","field":"acceleration","scale":{"zero":false}},"x":{"type":"nominal","field":"cylinders"},"y":{"type":"ordinal","aggregate":"min","field":"origin"}}}]}},"right":{"id":{"pairId":22,"position":"right"},"vlSpec":{"mark":"line","encoding":{"row":{"scale":{"zero":false},"field":"cylinders","type":"nominal"},"y":{"scale":{"zero":false},"field":"origin","type":"ordinal","aggregate":"min"},"x":{"scale":{"zero":true},"field":"acceleration","type":"quantitative","aggregate":"min"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[70],"facts":["data(\"cars.json\")","mark(line)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(continuous_x,e2)","soft(ordered_y,e1)","soft(c_d_no_overlap_line,_placeholder)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"}]},{"costs":[81],"facts":["data(\"cars.json\")","mark(line)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(continuous_x,e2)","soft(ordered_y,e1)","aggregate(5,count)","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[82],"facts":["data(\"cars.json\")","mark(line)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(continuous_x,e2)","soft(ordered_y,e1)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[83],"facts":["data(\"cars.json\")","mark(line)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(continuous_x,e2)","soft(ordered_y,e1)","aggregate(5,count)","channel(5,color)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(log,5)","log(5)","soft(zero,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_count,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Count as aggregate op.","type":"soft","name":"aggregate_count","asp":"soft(aggregate_count,E) :- aggregate(E,count).","weight":0,"witness":"soft(aggregate_count,5)"}]},{"costs":[85],"facts":["data(\"cars.json\")","mark(line)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(continuous_x,e2)","soft(ordered_y,e1)","type(5,ordinal)","field(5,\"year\")","channel(5,color)","soft(c_d_line,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(ordered_color,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark.","type":"soft","name":"c_d_line","asp":"soft(c_d_line) :- is_c_d, not no_overlap, mark(line).","weight":20,"witness":"soft(c_d_line,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"}]},{"costs":[88],"facts":["data(\"cars.json\")","mark(line)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(continuous_x,e2)","soft(ordered_y,e1)","aggregate(5,mean)","field(5,\"displacement\")","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]},{"costs":[88],"facts":["data(\"cars.json\")","mark(line)","zero(e2)","aggregate(e1,min)","aggregate(e2,min)","channel(e0,row)","channel(e1,y)","channel(e2,x)","field(e0,\"cylinders\")","field(e1,\"origin\")","field(e2,\"acceleration\")","soft(x_row,_placeholder)","soft(y_row,_placeholder)","soft(aggregate,e1)","soft(aggregate,e2)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding,e2)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(encoding_field,e2)","soft(number_nominal,e0)","soft(type_q,e2)","soft(type_o,e1)","soft(type_n,e0)","soft(nominal_row,e0)","soft(aggregate_min,e1)","soft(aggregate_min,e2)","type(e0,nominal)","type(e1,ordinal)","type(e2,quantitative)","soft(continuous_x,e2)","soft(ordered_y,e1)","aggregate(5,mean)","field(5,\"miles_per_gallon\")","channel(5,color)","zero(5)","type(5,quantitative)","soft(c_d_no_overlap_line,_placeholder)","soft(aggregate,5)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_color,5)","soft(aggregate_mean,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e1)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,e2)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e2)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e2)"},{"description":"Numbers should not be nominal.","type":"soft","name":"number_nominal","asp":"soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).","weight":10,"witness":"soft(number_nominal,e0)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e2)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,e0)"},{"description":"Nominal on row channel.","type":"soft","name":"nominal_row","asp":"soft(nominal_row,E) :- channel(E,row), type(E,nominal).","weight":7,"witness":"soft(nominal_row,e0)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e1)"},{"description":"Min as aggregate op.","type":"soft","name":"aggregate_min","asp":"soft(aggregate_min,E) :- aggregate(E,min).","weight":4,"witness":"soft(aggregate_min,e2)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e2)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e1)"},{"description":"Continuous by discrete for line mark with no overlap.","type":"soft","name":"c_d_no_overlap_line","asp":"soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).","weight":20,"witness":"soft(c_d_no_overlap_line,_placeholder)"},{"description":"Prefer to use raw (no aggregate).","type":"soft","name":"aggregate","asp":"soft(aggregate,E) :- aggregate(E,_).","weight":1,"witness":"soft(aggregate,5)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on color channel.","type":"soft","name":"continuous_color","asp":"soft(continuous_color,E) :- channel(E,color), continuous(E).","weight":10,"witness":"soft(continuous_color,5)"},{"description":"Mean as aggregate op.","type":"soft","name":"aggregate_mean","asp":"soft(aggregate_mean,E) :- aggregate(E,mean).","weight":1,"witness":"soft(aggregate_mean,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"origin"},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"origin"},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"zero":false}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"origin"},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"count","scale":{"type":"log","zero":false}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"origin"},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"ordinal","field":"year"},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"origin"},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"displacement","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"origin"},"row":{"type":"nominal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"line","encoding":{"color":{"type":"quantitative","aggregate":"mean","field":"miles_per_gallon","scale":{"zero":true}},"x":{"type":"quantitative","aggregate":"min","field":"acceleration","scale":{"zero":true}},"y":{"type":"ordinal","aggregate":"min","field":"origin"},"row":{"type":"nominal","field":"cylinders"}}}]}},"comp":"<"},{"id":23,"title":"","left":{"id":{"pairId":23,"position":"left"},"vlSpec":{"mark":"tick","encoding":{"y":{"scale":{"zero":false},"field":"cylinders","type":"ordinal"},"x":{"scale":{"zero":false},"field":"horsepower","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[15],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[16],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(log,e1)","log(e1)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[18],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e0,10)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(quant_bin,e0)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[19],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e0,10)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(quant_bin,e0)","soft(log,e1)","log(e1)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[28],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e0,25)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(bin_high,e0)","soft(quant_bin,e0)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer binning with at most 12 buckets.","type":"soft","name":"bin_high","asp":"soft(bin_high,E) :- bin(E,B), B > 12.","weight":10,"witness":"soft(bin_high,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[29],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e0,25)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e0)","soft(bin_high,e0)","soft(quant_bin,e0)","soft(log,e1)","log(e1)","soft(zero,e1)","soft(continuous_x,e1)","soft(ordered_y,e0)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e0)"},{"description":"Prefer binning with at most 12 buckets.","type":"soft","name":"bin_high","asp":"soft(bin_high,E) :- bin(E,B), B > 12.","weight":10,"witness":"soft(bin_high,e0)"},{"description":"Prefer quantitative for bin.","type":"soft","name":"quant_bin","asp":"soft(quant_bin,E) :- bin(E,_), not type(E,quantitative).","weight":1,"witness":"soft(quant_bin,e0)"},{"description":"Prefer not to use log scale.","type":"soft","name":"log","asp":"soft(log,E) :- log(E).","weight":1,"witness":"soft(log,e1)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"}]},{"costs":[30],"facts":["data(\"cars.json\")","mark(tick)","channel(e0,y)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","type(5,ordinal)","field(5,\"origin\")","channel(5,color)","soft(zero_positional,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(zero,e1)","soft(type_o,5)","soft(continuous_x,e1)","soft(ordered_y,e0)","soft(ordered_color,5)"],"violations":[{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Prefer zero positional.","type":"soft","name":"zero_positional","asp":"soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).","weight":1,"witness":"soft(zero_positional,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer to include zero for continuous (binned doesn't need zero).","type":"soft","name":"zero","asp":"soft(zero,E) :- continuous(E), not zero(E).","weight":1,"witness":"soft(zero,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,e0)"},{"description":"Ordered on color channel.","type":"soft","name":"ordered_color","asp":"soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).","weight":8,"witness":"soft(ordered_color,5)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","field":"horsepower","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders","bin":true},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders","bin":true},"x":{"type":"quantitative","field":"horsepower","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders","bin":{"maxbins":25}},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"cylinders","bin":{"maxbins":25}},"x":{"type":"quantitative","field":"horsepower","scale":{"type":"log","zero":false}}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"color":{"type":"ordinal","field":"origin"},"y":{"type":"ordinal","field":"cylinders"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":false}}}}]}},"right":{"id":{"pairId":23,"position":"right"},"vlSpec":{"mark":"tick","encoding":{"row":{"scale":{"zero":false},"field":"cylinders","type":"ordinal"},"x":{"scale":{"zero":true},"field":"horsepower","type":"quantitative"}},"data":{"url":"cars.json","format":{"type":"json"}},"$schema":"https://vega.github.io/schema/vega-lite/v2.0.json"},"solutionOpt":{"models":[{"costs":[32],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","type(5,ordinal)","field(5,\"year\")","channel(5,y)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e1)","soft(ordered_y,5)","soft(ordered_row,e0)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"}]},{"costs":[32],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","type(5,ordinal)","field(5,\"origin\")","channel(5,y)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_o,5)","soft(continuous_x,e1)","soft(ordered_y,5)","soft(ordered_row,e0)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on y channel.","type":"soft","name":"ordered_y","asp":"soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).","weight":0,"witness":"soft(ordered_y,5)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"}]},{"costs":[33],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","type(5,nominal)","field(5,\"year\")","channel(5,y)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(continuous_x,e1)","soft(ordered_row,e0)","soft(nominal_y,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,5)"}]},{"costs":[33],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","type(5,nominal)","field(5,\"origin\")","channel(5,y)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(encoding,5)","soft(encoding_field,5)","soft(type_n,5)","soft(continuous_x,e1)","soft(ordered_row,e0)","soft(nominal_y,5)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_n","asp":"soft(type_n,E) :- type(E,nominal).","weight":2,"witness":"soft(type_n,5)"},{"description":"Continuous on x channel.","type":"soft","name":"continuous_x","asp":"soft(continuous_x,E) :- channel(E,x), continuous(E).","weight":0,"witness":"soft(continuous_x,e1)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"},{"description":"Nominal on y channel.","type":"soft","name":"nominal_y","asp":"soft(nominal_y,E) :- channel(E,y), type(E,nominal).","weight":0,"witness":"soft(nominal_y,5)"}]},{"costs":[34],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e1,10)","field(5,\"miles_per_gallon\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e1)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e1)","soft(ordered_row,e0)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"}]},{"costs":[34],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e1,10)","field(5,\"displacement\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e1)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e1)","soft(ordered_row,e0)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"}]},{"costs":[34],"facts":["data(\"cars.json\")","mark(tick)","zero(e1)","channel(e0,row)","channel(e1,x)","field(e0,\"cylinders\")","field(e1,\"horsepower\")","soft(x_row,_placeholder)","soft(encoding,e0)","soft(encoding,e1)","soft(encoding_field,e0)","soft(encoding_field,e1)","soft(type_q,e1)","soft(type_o,e0)","type(e0,ordinal)","type(e1,quantitative)","bin(e1,10)","field(5,\"acceleration\")","channel(5,y)","zero(5)","type(5,quantitative)","soft(y_row,_placeholder)","soft(c_d_tick,_placeholder)","soft(bin,e1)","soft(encoding,5)","soft(encoding_field,5)","soft(type_q,5)","soft(continuous_y,5)","soft(ordered_x,e1)","soft(ordered_row,e0)"],"violations":[{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"x_row","asp":"soft(x_row) :- channel(_,x), channel(_,row).","weight":1,"witness":"soft(x_row,_placeholder)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e0)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,e1)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e0)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,e1)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_o","asp":"soft(type_o,E) :- type(E,ordinal).","weight":1,"witness":"soft(type_o,e0)"},{"description":"Positional interactions as suggested by Kim et al.","type":"soft","name":"y_row","asp":"soft(y_row) :- channel(_,y), channel(_,row).","weight":1,"witness":"soft(y_row,_placeholder)"},{"description":"Continuous by discrete for tick mark.","type":"soft","name":"c_d_tick","asp":"soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).","weight":0,"witness":"soft(c_d_tick,_placeholder)"},{"description":"Prefer to not bin.","type":"soft","name":"bin","asp":"soft(bin,E) :- bin(E,_).","weight":2,"witness":"soft(bin,e1)"},{"description":"Prefer to use fewer encodings.","type":"soft","name":"encoding","asp":"soft(encoding,E) :- encoding(E).","weight":0,"witness":"soft(encoding,5)"},{"description":"Prefer to use fewer encodings with fields (count does not have a field).","type":"soft","name":"encoding_field","asp":"soft(encoding_field,E) :- encoding(E), field(E,_).","weight":6,"witness":"soft(encoding_field,5)"},{"description":"Prefer quantitative > ordinal > nominal.","type":"soft","name":"type_q","asp":"soft(type_q,E) :- type(E,quantitative).","weight":0,"witness":"soft(type_q,5)"},{"description":"Continuous on y channel.","type":"soft","name":"continuous_y","asp":"soft(continuous_y,E) :- channel(E,y), continuous(E).","weight":0,"witness":"soft(continuous_y,5)"},{"description":"Ordered on x channel.","type":"soft","name":"ordered_x","asp":"soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).","weight":1,"witness":"soft(ordered_x,e1)"},{"description":"Ordered on row channel.","type":"soft","name":"ordered_row","asp":"soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).","weight":10,"witness":"soft(ordered_row,e0)"}]}],"programs":["TOPK_LUA","DEFINE","GENERATE","HARD","SOFT","WEIGHTS","ASSIGN_WEIGHTS","OPTIMIZE","OUTPUT"],"specs":[{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"year"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"ordinal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"year"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"nominal","field":"origin"},"x":{"type":"quantitative","field":"horsepower","scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"miles_per_gallon","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"displacement","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}},{"$schema":"https://vega.github.io/schema/vega-lite/v3.json","data":{"url":"cars.json"},"mark":"tick","encoding":{"y":{"type":"quantitative","field":"acceleration","scale":{"zero":true}},"x":{"type":"quantitative","field":"horsepower","bin":true,"scale":{"zero":true}},"row":{"type":"ordinal","field":"cylinders"}}}]}},"comp":"<"}]}`)
